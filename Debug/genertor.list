
genertor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007df8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007fbc  08007fbc  00008fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008014  08008014  00021810  2**0
                  CONTENTS
  4 .ARM          00000008  08008014  08008014  00009014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800801c  0800801c  00021810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800801c  0800801c  0000901c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008020  08008020  00009020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00017810  20000000  08008024  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c50  20017810  0801f834  00021810  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019460  0801f834  00022460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021810  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148fa  00000000  00000000  00021840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b0  00000000  00000000  0003613a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  000397f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9c  00000000  00000000  0003a9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d05  00000000  00000000  0003b77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a03  00000000  00000000  00060481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2aee  00000000  00000000  00077e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a972  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c4  00000000  00000000  0014a9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0014f37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20017810 	.word	0x20017810
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007fa4 	.word	0x08007fa4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20017814 	.word	0x20017814
 8000200:	08007fa4 	.word	0x08007fa4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	4b4e      	ldr	r3, [pc, #312]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a4d      	ldr	r2, [pc, #308]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b4b      	ldr	r3, [pc, #300]	@ (8000648 <MX_GPIO_Init+0x154>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	4b47      	ldr	r3, [pc, #284]	@ (8000648 <MX_GPIO_Init+0x154>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a46      	ldr	r2, [pc, #280]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b44      	ldr	r3, [pc, #272]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0304 	and.w	r3, r3, #4
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	4b40      	ldr	r3, [pc, #256]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a3f      	ldr	r2, [pc, #252]	@ (8000648 <MX_GPIO_Init+0x154>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b3d      	ldr	r3, [pc, #244]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	4b39      	ldr	r3, [pc, #228]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a38      	ldr	r2, [pc, #224]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b36      	ldr	r3, [pc, #216]	@ (8000648 <MX_GPIO_Init+0x154>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, B0_Pin|B1_Pin|B2_Pin|B3_Pin
 800057a:	2200      	movs	r2, #0
 800057c:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000580:	4832      	ldr	r0, [pc, #200]	@ (800064c <MX_GPIO_Init+0x158>)
 8000582:	f000 fdcd 	bl	8001120 <HAL_GPIO_WritePin>
                          |B4_Pin|B5_Pin|B6_Pin|B7_Pin
                          |SYNC_PIXEL_Pin|SYNC_ROW_Pin|SYNC_FRAME_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R0_Pin|R1_Pin|R2_Pin|R3_Pin
 8000586:	2200      	movs	r2, #0
 8000588:	21ff      	movs	r1, #255	@ 0xff
 800058a:	4831      	ldr	r0, [pc, #196]	@ (8000650 <MX_GPIO_Init+0x15c>)
 800058c:	f000 fdc8 	bl	8001120 <HAL_GPIO_WritePin>
                          |R4_Pin|R5_Pin|R6_Pin|R7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G0_Pin|G1_Pin|G2_Pin|G3_Pin
 8000590:	2200      	movs	r2, #0
 8000592:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8000596:	482f      	ldr	r0, [pc, #188]	@ (8000654 <MX_GPIO_Init+0x160>)
 8000598:	f000 fdc2 	bl	8001120 <HAL_GPIO_WritePin>
                          |WR_Pin|CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B0_Pin B1_Pin B2_Pin B3_Pin
                           B4_Pin B5_Pin B6_Pin B7_Pin
                           SYNC_PIXEL_Pin */
  GPIO_InitStruct.Pin = B0_Pin|B1_Pin|B2_Pin|B3_Pin
 800059c:	f240 13ff 	movw	r3, #511	@ 0x1ff
 80005a0:	617b      	str	r3, [r7, #20]
                          |B4_Pin|B5_Pin|B6_Pin|B7_Pin
                          |SYNC_PIXEL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005aa:	2303      	movs	r3, #3
 80005ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	4825      	ldr	r0, [pc, #148]	@ (800064c <MX_GPIO_Init+0x158>)
 80005b6:	f000 fc07 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R0_Pin R1_Pin R2_Pin R3_Pin
                           R4_Pin R5_Pin R6_Pin R7_Pin */
  GPIO_InitStruct.Pin = R0_Pin|R1_Pin|R2_Pin|R3_Pin
 80005ba:	23ff      	movs	r3, #255	@ 0xff
 80005bc:	617b      	str	r3, [r7, #20]
                          |R4_Pin|R5_Pin|R6_Pin|R7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	4619      	mov	r1, r3
 80005d0:	481f      	ldr	r0, [pc, #124]	@ (8000650 <MX_GPIO_Init+0x15c>)
 80005d2:	f000 fbf9 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G0_Pin G1_Pin G2_Pin G3_Pin
                           G4_Pin G5_Pin G6_Pin G7_Pin
                           WR_Pin CS_Pin */
  GPIO_InitStruct.Pin = G0_Pin|G1_Pin|G2_Pin|G3_Pin
 80005d6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80005da:	617b      	str	r3, [r7, #20]
                          |G4_Pin|G5_Pin|G6_Pin|G7_Pin
                          |WR_Pin|CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e4:	2303      	movs	r3, #3
 80005e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	4819      	ldr	r0, [pc, #100]	@ (8000654 <MX_GPIO_Init+0x160>)
 80005f0:	f000 fbea 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SYNC_ROW_Pin SYNC_FRAME_Pin */
  GPIO_InitStruct.Pin = SYNC_ROW_Pin|SYNC_FRAME_Pin;
 80005f4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000602:	2302      	movs	r3, #2
 8000604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	480f      	ldr	r0, [pc, #60]	@ (800064c <MX_GPIO_Init+0x158>)
 800060e:	f000 fbdb 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SYNC_Pin */
  GPIO_InitStruct.Pin = SYNC_Pin;
 8000612:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000618:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SYNC_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	4808      	ldr	r0, [pc, #32]	@ (800064c <MX_GPIO_Init+0x158>)
 800062a:	f000 fbcd 	bl	8000dc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	2028      	movs	r0, #40	@ 0x28
 8000634:	f000 fb91 	bl	8000d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000638:	2028      	movs	r0, #40	@ 0x28
 800063a:	f000 fbaa 	bl	8000d92 <HAL_NVIC_EnableIRQ>

}
 800063e:	bf00      	nop
 8000640:	3728      	adds	r7, #40	@ 0x28
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40020800 	.word	0x40020800
 8000650:	40020000 	.word	0x40020000
 8000654:	40020400 	.word	0x40020400

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 fa0c 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f80e 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f7ff ff46 	bl	80004f4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000668:	f006 fefa 	bl	8007460 <MX_USB_DEVICE_Init>
  MX_TIM10_Init();
 800066c:	f000 f990 	bl	8000990 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim10);
 8000670:	4802      	ldr	r0, [pc, #8]	@ (800067c <main+0x24>)
 8000672:	f003 f9af 	bl	80039d4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000676:	bf00      	nop
 8000678:	e7fd      	b.n	8000676 <main+0x1e>
 800067a:	bf00      	nop
 800067c:	20017830 	.word	0x20017830

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	@ 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2234      	movs	r2, #52	@ 0x34
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f007 fc5c 	bl	8007f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b2c      	ldr	r3, [pc, #176]	@ (800075c <SystemClock_Config+0xdc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	4a2b      	ldr	r2, [pc, #172]	@ (800075c <SystemClock_Config+0xdc>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b4:	4b29      	ldr	r3, [pc, #164]	@ (800075c <SystemClock_Config+0xdc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4b26      	ldr	r3, [pc, #152]	@ (8000760 <SystemClock_Config+0xe0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a25      	ldr	r2, [pc, #148]	@ (8000760 <SystemClock_Config+0xe0>)
 80006ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b23      	ldr	r3, [pc, #140]	@ (8000760 <SystemClock_Config+0xe0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006f4:	23b4      	movs	r3, #180	@ 0xb4
 80006f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006fc:	2308      	movs	r3, #8
 80006fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4618      	mov	r0, r3
 800070a:	f002 fe75 	bl	80033f8 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000714:	f000 f8b0 	bl	8000878 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000718:	f001 ffd2 	bl	80026c0 <HAL_PWREx_EnableOverDrive>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000722:	f000 f8a9 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2302      	movs	r3, #2
 800072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000732:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	2105      	movs	r1, #5
 8000744:	4618      	mov	r0, r3
 8000746:	f002 f80b 	bl	8002760 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000750:	f000 f892 	bl	8000878 <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	3750      	adds	r7, #80	@ 0x50
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <HAL_GPIO_EXTI_Callback>:
{
	memcpy((uint8_t*)buffer,(uint8_t*)frame_buffer + (itter*WIDTH), WIDTH * sizeof(uint32_t));
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(SYNC_GPIO_Port, SYNC_Pin) == GPIO_PIN_SET){
 800076e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000772:	4808      	ldr	r0, [pc, #32]	@ (8000794 <HAL_GPIO_EXTI_Callback+0x30>)
 8000774:	f000 fcbc 	bl	80010f0 <HAL_GPIO_ReadPin>
 8000778:	4603      	mov	r3, r0
 800077a:	2b01      	cmp	r3, #1
 800077c:	d103      	bne.n	8000786 <HAL_GPIO_EXTI_Callback+0x22>
		status = Status_Tim_off;
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x34>)
 8000780:	2201      	movs	r2, #1
 8000782:	701a      	strb	r2, [r3, #0]
	}
	else{
		status = Status_Tim_on;
	}
}
 8000784:	e002      	b.n	800078c <HAL_GPIO_EXTI_Callback+0x28>
		status = Status_Tim_on;
 8000786:	4b04      	ldr	r3, [pc, #16]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x34>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40020800 	.word	0x40020800
 8000798:	20017700 	.word	0x20017700

0800079c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	if(status != Status_Tim_on)
 80007a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000860 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d152      	bne.n	8000854 <HAL_TIM_PeriodElapsedCallback+0xb8>
	{
		return;
	}
	GPIOC->ODR ^= (1 << 8); // PC8 toggle it should be high
 80007ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000864 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4a2c      	ldr	r2, [pc, #176]	@ (8000864 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80007b4:	f483 7380 	eor.w	r3, r3, #256	@ 0x100
 80007b8:	6153      	str	r3, [r2, #20]
	GPIOA->ODR = (GPIOA->ODR & 0xFF00) | (0xff & (frame[itter]>>16)); // for USB safety PA11 and PA12
 80007ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000868 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	f403 427f 	and.w	r2, r3, #65280	@ 0xff00
 80007c2:	4b2a      	ldr	r3, [pc, #168]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	492a      	ldr	r1, [pc, #168]	@ (8000870 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80007c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007cc:	0c1b      	lsrs	r3, r3, #16
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	4925      	ldr	r1, [pc, #148]	@ (8000868 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80007d2:	4313      	orrs	r3, r2
 80007d4:	614b      	str	r3, [r1, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFF00) | (0xff & (frame[itter]>>8));
 80007d6:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f403 427f 	and.w	r2, r3, #65280	@ 0xff00
 80007de:	4b23      	ldr	r3, [pc, #140]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4923      	ldr	r1, [pc, #140]	@ (8000870 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80007e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	4921      	ldr	r1, [pc, #132]	@ (8000874 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80007ee:	4313      	orrs	r3, r2
 80007f0:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF00) | (0xff & frame[itter]); // toggle PC8 and PC10 if they are high
 80007f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 427f 	and.w	r2, r3, #65280	@ 0xff00
 80007fa:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	491c      	ldr	r1, [pc, #112]	@ (8000870 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000800:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	4917      	ldr	r1, [pc, #92]	@ (8000864 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000808:	4313      	orrs	r3, r2
 800080a:	614b      	str	r3, [r1, #20]
	GPIOC->ODR ^= (1 << 8);
 800080c:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	4a14      	ldr	r2, [pc, #80]	@ (8000864 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000812:	f483 7380 	eor.w	r3, r3, #256	@ 0x100
 8000816:	6153      	str	r3, [r2, #20]
	//GPIOA->ODR = (GPIOA->ODR & 0xFF00) | (0xff & (data)); // for USB safety PA11 and PA12
	//GPIOB->ODR = 0xff & (data);
	//GPIOC->ODR = 0xff & data; // toggle PC8 and PC10 if they are high
	//data++;

	itter++;
 8000818:	4b14      	ldr	r3, [pc, #80]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	4a13      	ldr	r2, [pc, #76]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000820:	6013      	str	r3, [r2, #0]
	if(itter >= MAX_ITTER)
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 800082a:	4293      	cmp	r3, r2
 800082c:	d913      	bls.n	8000856 <HAL_TIM_PeriodElapsedCallback+0xba>
	{
		GPIOC->ODR ^= (1 << 10); // PC10 toggle it should be high
 800082e:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	4a0c      	ldr	r2, [pc, #48]	@ (8000864 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000834:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 8000838:	6153      	str	r3, [r2, #20]
		itter= 0;
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
		status = Status_Tim_off;
 8000840:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR ^= (1 << 10);
 8000846:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	4a06      	ldr	r2, [pc, #24]	@ (8000864 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800084c:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 8000850:	6153      	str	r3, [r2, #20]
 8000852:	e000      	b.n	8000856 <HAL_TIM_PeriodElapsedCallback+0xba>
		return;
 8000854:	bf00      	nop
	}
}
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	20017700 	.word	0x20017700
 8000864:	40020800 	.word	0x40020800
 8000868:	40020000 	.word	0x40020000
 800086c:	2001782c 	.word	0x2001782c
 8000870:	20000000 	.word	0x20000000
 8000874:	40020400 	.word	0x40020400

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <Error_Handler+0x8>

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000892:	4a0f      	ldr	r2, [pc, #60]	@ (80008d0 <HAL_MspInit+0x4c>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000898:	6453      	str	r3, [r2, #68]	@ 0x44
 800089a:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ae:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <HAL_MspInit+0x4c>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <NMI_Handler+0x4>

080008dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <MemManage_Handler+0x4>

080008ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092a:	f000 f8f7 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000938:	4802      	ldr	r0, [pc, #8]	@ (8000944 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800093a:	f003 f8bb 	bl	8003ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20017830 	.word	0x20017830

08000948 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SYNC_Pin);
 800094c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000950:	f000 fc00 	bl	8001154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800095c:	4802      	ldr	r0, [pc, #8]	@ (8000968 <OTG_FS_IRQHandler+0x10>)
 800095e:	f000 fd5c 	bl	800141a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20018d5c 	.word	0x20018d5c

0800096c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <SystemInit+0x20>)
 8000972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000976:	4a05      	ldr	r2, [pc, #20]	@ (800098c <SystemInit+0x20>)
 8000978:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800097c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000994:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <MX_TIM10_Init+0x3c>)
 8000996:	4a0e      	ldr	r2, [pc, #56]	@ (80009d0 <MX_TIM10_Init+0x40>)
 8000998:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9-1;
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_TIM10_Init+0x3c>)
 800099c:	2208      	movs	r2, #8
 800099e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a0:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <MX_TIM10_Init+0x3c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50-1;
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_TIM10_Init+0x3c>)
 80009a8:	2231      	movs	r2, #49	@ 0x31
 80009aa:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ac:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <MX_TIM10_Init+0x3c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_TIM10_Init+0x3c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80009b8:	4804      	ldr	r0, [pc, #16]	@ (80009cc <MX_TIM10_Init+0x3c>)
 80009ba:	f002 ffbb 	bl	8003934 <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 80009c4:	f7ff ff58 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20017830 	.word	0x20017830
 80009d0:	40014400 	.word	0x40014400

080009d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0e      	ldr	r2, [pc, #56]	@ (8000a1c <HAL_TIM_Base_MspInit+0x48>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d115      	bne.n	8000a12 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000a20 <HAL_TIM_Base_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000a20 <HAL_TIM_Base_MspInit+0x4c>)
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <HAL_TIM_Base_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2101      	movs	r1, #1
 8000a06:	2019      	movs	r0, #25
 8000a08:	f000 f9a7 	bl	8000d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a0c:	2019      	movs	r0, #25
 8000a0e:	f000 f9c0 	bl	8000d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8000a12:	bf00      	nop
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40014400 	.word	0x40014400
 8000a20:	40023800 	.word	0x40023800

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a28:	f7ff ffa0 	bl	800096c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	@ (8000a60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	@ (8000a64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	@ (8000a68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	@ (8000a70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f007 fa83 	bl	8007f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fdff 	bl	8000658 <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20017810 	.word	0x20017810
  ldr r2, =_sidata
 8000a68:	08008024 	.word	0x08008024
  ldr r2, =_sbss
 8000a6c:	20017810 	.word	0x20017810
  ldr r4, =_ebss
 8000a70:	20019460 	.word	0x20019460

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab8 <HAL_Init+0x40>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <HAL_Init+0x40>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	@ (8000ab8 <HAL_Init+0x40>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f94f 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff feea 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f967 	bl	8000dae <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f000 f92f 	bl	8000d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	@ (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20017704 	.word	0x20017704
 8000b14:	2001770c 	.word	0x2001770c
 8000b18:	20017708 	.word	0x20017708

08000b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	@ (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	2001770c 	.word	0x2001770c
 8000b40:	20017878 	.word	0x20017878

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b03      	ldr	r3, [pc, #12]	@ (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20017878 	.word	0x20017878

08000b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b64:	f7ff ffee 	bl	8000b44 <HAL_GetTick>
 8000b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b74:	d005      	beq.n	8000b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba0 <HAL_Delay+0x44>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4413      	add	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b82:	bf00      	nop
 8000b84:	f7ff ffde 	bl	8000b44 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d8f7      	bhi.n	8000b84 <HAL_Delay+0x28>
  {
  }
}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2001770c 	.word	0x2001770c

08000ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	@ (8000c40 <__NVIC_EnableIRQ+0x38>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	@ (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	@ (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	@ 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	@ 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d10:	d301      	bcc.n	8000d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00f      	b.n	8000d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d16:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <SysTick_Config+0x40>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1e:	210f      	movs	r1, #15
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f7ff ff8e 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <SysTick_Config+0x40>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <SysTick_Config+0x40>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e000e010 	.word	0xe000e010

08000d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff29 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6c:	f7ff ff3e 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f7ff ff8e 	bl	8000c98 <NVIC_EncodePriority>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff5d 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff31 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffa2 	bl	8000d00 <SysTick_Config>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	@ 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
 8000de2:	e165      	b.n	80010b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000de4:	2201      	movs	r2, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	f040 8154 	bne.w	80010aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d005      	beq.n	8000e1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d130      	bne.n	8000e7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	2203      	movs	r2, #3
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e50:	2201      	movs	r2, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	091b      	lsrs	r3, r3, #4
 8000e66:	f003 0201 	and.w	r2, r3, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d017      	beq.n	8000eb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d123      	bne.n	8000f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	08da      	lsrs	r2, r3, #3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3208      	adds	r2, #8
 8000ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	220f      	movs	r2, #15
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	691a      	ldr	r2, [r3, #16]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	08da      	lsrs	r2, r3, #3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3208      	adds	r2, #8
 8000f06:	69b9      	ldr	r1, [r7, #24]
 8000f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0203 	and.w	r2, r3, #3
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 80ae 	beq.w	80010aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b5d      	ldr	r3, [pc, #372]	@ (80010c8 <HAL_GPIO_Init+0x300>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f56:	4a5c      	ldr	r2, [pc, #368]	@ (80010c8 <HAL_GPIO_Init+0x300>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5e:	4b5a      	ldr	r3, [pc, #360]	@ (80010c8 <HAL_GPIO_Init+0x300>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f6a:	4a58      	ldr	r2, [pc, #352]	@ (80010cc <HAL_GPIO_Init+0x304>)
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	089b      	lsrs	r3, r3, #2
 8000f70:	3302      	adds	r3, #2
 8000f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4f      	ldr	r2, [pc, #316]	@ (80010d0 <HAL_GPIO_Init+0x308>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d025      	beq.n	8000fe2 <HAL_GPIO_Init+0x21a>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4e      	ldr	r2, [pc, #312]	@ (80010d4 <HAL_GPIO_Init+0x30c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d01f      	beq.n	8000fde <HAL_GPIO_Init+0x216>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80010d8 <HAL_GPIO_Init+0x310>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d019      	beq.n	8000fda <HAL_GPIO_Init+0x212>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4c      	ldr	r2, [pc, #304]	@ (80010dc <HAL_GPIO_Init+0x314>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d013      	beq.n	8000fd6 <HAL_GPIO_Init+0x20e>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4b      	ldr	r2, [pc, #300]	@ (80010e0 <HAL_GPIO_Init+0x318>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d00d      	beq.n	8000fd2 <HAL_GPIO_Init+0x20a>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4a      	ldr	r2, [pc, #296]	@ (80010e4 <HAL_GPIO_Init+0x31c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d007      	beq.n	8000fce <HAL_GPIO_Init+0x206>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a49      	ldr	r2, [pc, #292]	@ (80010e8 <HAL_GPIO_Init+0x320>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d101      	bne.n	8000fca <HAL_GPIO_Init+0x202>
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	e00c      	b.n	8000fe4 <HAL_GPIO_Init+0x21c>
 8000fca:	2307      	movs	r3, #7
 8000fcc:	e00a      	b.n	8000fe4 <HAL_GPIO_Init+0x21c>
 8000fce:	2305      	movs	r3, #5
 8000fd0:	e008      	b.n	8000fe4 <HAL_GPIO_Init+0x21c>
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x21c>
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e004      	b.n	8000fe4 <HAL_GPIO_Init+0x21c>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e002      	b.n	8000fe4 <HAL_GPIO_Init+0x21c>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <HAL_GPIO_Init+0x21c>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	69fa      	ldr	r2, [r7, #28]
 8000fe6:	f002 0203 	and.w	r2, r2, #3
 8000fea:	0092      	lsls	r2, r2, #2
 8000fec:	4093      	lsls	r3, r2
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff4:	4935      	ldr	r1, [pc, #212]	@ (80010cc <HAL_GPIO_Init+0x304>)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001002:	4b3a      	ldr	r3, [pc, #232]	@ (80010ec <HAL_GPIO_Init+0x324>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001026:	4a31      	ldr	r2, [pc, #196]	@ (80010ec <HAL_GPIO_Init+0x324>)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800102c:	4b2f      	ldr	r3, [pc, #188]	@ (80010ec <HAL_GPIO_Init+0x324>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001050:	4a26      	ldr	r2, [pc, #152]	@ (80010ec <HAL_GPIO_Init+0x324>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001056:	4b25      	ldr	r3, [pc, #148]	@ (80010ec <HAL_GPIO_Init+0x324>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800107a:	4a1c      	ldr	r2, [pc, #112]	@ (80010ec <HAL_GPIO_Init+0x324>)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <HAL_GPIO_Init+0x324>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a4:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <HAL_GPIO_Init+0x324>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3301      	adds	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	2b0f      	cmp	r3, #15
 80010b4:	f67f ae96 	bls.w	8000de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3724      	adds	r7, #36	@ 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40013800 	.word	0x40013800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020c00 	.word	0x40020c00
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40021400 	.word	0x40021400
 80010e8:	40021800 	.word	0x40021800
 80010ec:	40013c00 	.word	0x40013c00

080010f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	887b      	ldrh	r3, [r7, #2]
 8001102:	4013      	ands	r3, r2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001108:	2301      	movs	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	e001      	b.n	8001112 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	807b      	strh	r3, [r7, #2]
 800112c:	4613      	mov	r3, r2
 800112e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001130:	787b      	ldrb	r3, [r7, #1]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800113c:	e003      	b.n	8001146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	041a      	lsls	r2, r3, #16
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	619a      	str	r2, [r3, #24]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800115e:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001160:	695a      	ldr	r2, [r3, #20]
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	4013      	ands	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff faf6 	bl	8000764 <HAL_GPIO_EXTI_Callback>
  }
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40013c00 	.word	0x40013c00

08001184 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e108      	b.n	80013a8 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d106      	bne.n	80011b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f006 fb47 	bl	8007844 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2203      	movs	r2, #3
 80011ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011c4:	d102      	bne.n	80011cc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 ff5e 	bl	8004092 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7c1a      	ldrb	r2, [r3, #16]
 80011de:	f88d 2000 	strb.w	r2, [sp]
 80011e2:	3304      	adds	r3, #4
 80011e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e6:	f002 fe3d 	bl	8003e64 <USB_CoreInit>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2202      	movs	r2, #2
 80011f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0d5      	b.n	80013a8 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f002 ff56 	bl	80040b4 <USB_SetCurrentMode>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2202      	movs	r2, #2
 8001212:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e0c6      	b.n	80013a8 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800121a:	2300      	movs	r3, #0
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	e04a      	b.n	80012b6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	3315      	adds	r3, #21
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001234:	7bfa      	ldrb	r2, [r7, #15]
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4613      	mov	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	3314      	adds	r3, #20
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	b298      	uxth	r0, r3
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	4413      	add	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	332e      	adds	r3, #46	@ 0x2e
 800125c:	4602      	mov	r2, r0
 800125e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	4413      	add	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	3318      	adds	r3, #24
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	4413      	add	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	331c      	adds	r3, #28
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	3320      	adds	r3, #32
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	3324      	adds	r3, #36	@ 0x24
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	3301      	adds	r3, #1
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	791b      	ldrb	r3, [r3, #4]
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d3af      	bcc.n	8001220 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e044      	b.n	8001350 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012c6:	7bfa      	ldrb	r2, [r7, #15]
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012f2:	7bfa      	ldrb	r2, [r7, #15]
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4413      	add	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	440b      	add	r3, r1
 8001300:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	4613      	mov	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	4413      	add	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	3301      	adds	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	791b      	ldrb	r3, [r3, #4]
 8001354:	7bfa      	ldrb	r2, [r7, #15]
 8001356:	429a      	cmp	r2, r3
 8001358:	d3b5      	bcc.n	80012c6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7c1a      	ldrb	r2, [r3, #16]
 8001362:	f88d 2000 	strb.w	r2, [sp]
 8001366:	3304      	adds	r3, #4
 8001368:	cb0e      	ldmia	r3, {r1, r2, r3}
 800136a:	f002 feef 	bl	800414c <USB_DevInit>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2202      	movs	r2, #2
 8001378:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e013      	b.n	80013a8 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7b1b      	ldrb	r3, [r3, #12]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d102      	bne.n	800139c <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f001 f96e 	bl	8002678 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 ff2c 	bl	80051fe <USB_DevDisconnect>

  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_PCD_Start+0x1c>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e022      	b.n	8001412 <HAL_PCD_Start+0x62>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d009      	beq.n	80013f4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d105      	bne.n	80013f4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 fe39 	bl	8004070 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f003 feda 	bl	80051bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800141a:	b590      	push	{r4, r7, lr}
 800141c:	b08d      	sub	sp, #52	@ 0x34
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f003 ff98 	bl	8005366 <USB_GetMode>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	f040 84b9 	bne.w	8001db0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f003 fefc 	bl	8005240 <USB_ReadInterrupts>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 84af 	beq.w	8001dae <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fee9 	bl	8005240 <USB_ReadInterrupts>
 800146e:	4603      	mov	r3, r0
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b02      	cmp	r3, #2
 8001476:	d107      	bne.n	8001488 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	695a      	ldr	r2, [r3, #20]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f002 0202 	and.w	r2, r2, #2
 8001486:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f003 fed7 	bl	8005240 <USB_ReadInterrupts>
 8001492:	4603      	mov	r3, r0
 8001494:	f003 0310 	and.w	r3, r3, #16
 8001498:	2b10      	cmp	r3, #16
 800149a:	d161      	bne.n	8001560 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	699a      	ldr	r2, [r3, #24]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0210 	bic.w	r2, r2, #16
 80014aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	f003 020f 	and.w	r2, r3, #15
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	3304      	adds	r3, #4
 80014ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	0c5b      	lsrs	r3, r3, #17
 80014d0:	f003 030f 	and.w	r3, r3, #15
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d124      	bne.n	8001522 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d035      	beq.n	8001550 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	6a38      	ldr	r0, [r7, #32]
 80014f8:	f003 fd0e 	bl	8004f18 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001508:	441a      	add	r2, r3
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	695a      	ldr	r2, [r3, #20]
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	091b      	lsrs	r3, r3, #4
 8001516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800151a:	441a      	add	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	e016      	b.n	8001550 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	0c5b      	lsrs	r3, r3, #17
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	2b06      	cmp	r3, #6
 800152c:	d110      	bne.n	8001550 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001534:	2208      	movs	r2, #8
 8001536:	4619      	mov	r1, r3
 8001538:	6a38      	ldr	r0, [r7, #32]
 800153a:	f003 fced 	bl	8004f18 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	695a      	ldr	r2, [r3, #20]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800154a:	441a      	add	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699a      	ldr	r2, [r3, #24]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0210 	orr.w	r2, r2, #16
 800155e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f003 fe6b 	bl	8005240 <USB_ReadInterrupts>
 800156a:	4603      	mov	r3, r0
 800156c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001570:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001574:	f040 80a7 	bne.w	80016c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f003 fe70 	bl	8005266 <USB_ReadDevAllOutEpInterrupt>
 8001586:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001588:	e099      	b.n	80016be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800158a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 808e 	beq.w	80016b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fe94 	bl	80052ce <USB_ReadDevOutEPInterrupt>
 80015a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00c      	beq.n	80015cc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	015a      	lsls	r2, r3, #5
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	4413      	add	r3, r2
 80015ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015be:	461a      	mov	r2, r3
 80015c0:	2301      	movs	r3, #1
 80015c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fed0 	bl	800236c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00c      	beq.n	80015f0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	015a      	lsls	r2, r3, #5
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	4413      	add	r3, r2
 80015de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015e2:	461a      	mov	r2, r3
 80015e4:	2308      	movs	r3, #8
 80015e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 ffa6 	bl	800253c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d008      	beq.n	800160c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	015a      	lsls	r2, r3, #5
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	4413      	add	r3, r2
 8001602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001606:	461a      	mov	r2, r3
 8001608:	2310      	movs	r3, #16
 800160a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d030      	beq.n	8001678 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800161e:	2b80      	cmp	r3, #128	@ 0x80
 8001620:	d109      	bne.n	8001636 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001630:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001634:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001638:	4613      	mov	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4413      	add	r3, r2
 8001648:	3304      	adds	r3, #4
 800164a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	78db      	ldrb	r3, [r3, #3]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d108      	bne.n	8001666 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2200      	movs	r2, #0
 8001658:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4619      	mov	r1, r3
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f006 fa17 	bl	8007a94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	015a      	lsls	r2, r3, #5
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	4413      	add	r3, r2
 800166e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001672:	461a      	mov	r2, r3
 8001674:	2302      	movs	r3, #2
 8001676:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	f003 0320 	and.w	r3, r3, #32
 800167e:	2b00      	cmp	r3, #0
 8001680:	d008      	beq.n	8001694 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	015a      	lsls	r2, r3, #5
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	4413      	add	r3, r2
 800168a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800168e:	461a      	mov	r2, r3
 8001690:	2320      	movs	r3, #32
 8001692:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800169e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a0:	015a      	lsls	r2, r3, #5
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	4413      	add	r3, r2
 80016a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016aa:	461a      	mov	r2, r3
 80016ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	3301      	adds	r3, #1
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80016b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ba:	085b      	lsrs	r3, r3, #1
 80016bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80016be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f47f af62 	bne.w	800158a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f003 fdb8 	bl	8005240 <USB_ReadInterrupts>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80016da:	f040 80db 	bne.w	8001894 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fdd9 	bl	800529a <USB_ReadDevAllInEpInterrupt>
 80016e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80016ee:	e0cd      	b.n	800188c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80016f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 80c2 	beq.w	8001880 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f003 fdff 	bl	800530a <USB_ReadDevInEPInterrupt>
 800170c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d057      	beq.n	80017c8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	2201      	movs	r2, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800172c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	43db      	mvns	r3, r3
 8001732:	69f9      	ldr	r1, [r7, #28]
 8001734:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001738:	4013      	ands	r3, r2
 800173a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	015a      	lsls	r2, r3, #5
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	4413      	add	r3, r2
 8001744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001748:	461a      	mov	r2, r3
 800174a:	2301      	movs	r3, #1
 800174c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	799b      	ldrb	r3, [r3, #6]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d132      	bne.n	80017bc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800175a:	4613      	mov	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	3320      	adds	r3, #32
 8001766:	6819      	ldr	r1, [r3, #0]
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800176c:	4613      	mov	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4403      	add	r3, r0
 8001776:	331c      	adds	r3, #28
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4419      	add	r1, r3
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001780:	4613      	mov	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	4413      	add	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4403      	add	r3, r0
 800178a:	3320      	adds	r3, #32
 800178c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001790:	2b00      	cmp	r3, #0
 8001792:	d113      	bne.n	80017bc <HAL_PCD_IRQHandler+0x3a2>
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001798:	4613      	mov	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	3324      	adds	r3, #36	@ 0x24
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d108      	bne.n	80017bc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80017b4:	461a      	mov	r2, r3
 80017b6:	2101      	movs	r1, #1
 80017b8:	f003 fe06 	bl	80053c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4619      	mov	r1, r3
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f006 f8e1 	bl	800798a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d008      	beq.n	80017e4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	015a      	lsls	r2, r3, #5
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	4413      	add	r3, r2
 80017da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017de:	461a      	mov	r2, r3
 80017e0:	2308      	movs	r3, #8
 80017e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d008      	beq.n	8001800 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f0:	015a      	lsls	r2, r3, #5
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017fa:	461a      	mov	r2, r3
 80017fc:	2310      	movs	r3, #16
 80017fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001806:	2b00      	cmp	r3, #0
 8001808:	d008      	beq.n	800181c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	4413      	add	r3, r2
 8001812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001816:	461a      	mov	r2, r3
 8001818:	2340      	movs	r3, #64	@ 0x40
 800181a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d023      	beq.n	800186e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001826:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001828:	6a38      	ldr	r0, [r7, #32]
 800182a:	f002 fded 	bl	8004408 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800182e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	3310      	adds	r3, #16
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	3304      	adds	r3, #4
 8001840:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	78db      	ldrb	r3, [r3, #3]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d108      	bne.n	800185c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2200      	movs	r2, #0
 800184e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4619      	mov	r1, r3
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f006 f92e 	bl	8007ab8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800185c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185e:	015a      	lsls	r2, r3, #5
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	4413      	add	r3, r2
 8001864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001868:	461a      	mov	r2, r3
 800186a:	2302      	movs	r3, #2
 800186c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001878:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 fcea 	bl	8002254 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001882:	3301      	adds	r3, #1
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001888:	085b      	lsrs	r3, r3, #1
 800188a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800188c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800188e:	2b00      	cmp	r3, #0
 8001890:	f47f af2e 	bne.w	80016f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f003 fcd1 	bl	8005240 <USB_ReadInterrupts>
 800189e:	4603      	mov	r3, r0
 80018a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80018a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018a8:	d122      	bne.n	80018f0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d108      	bne.n	80018da <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018d0:	2100      	movs	r1, #0
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f006 faa8 	bl	8007e28 <HAL_PCDEx_LPM_Callback>
 80018d8:	e002      	b.n	80018e0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f006 f8cc 	bl	8007a78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80018ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f003 fca3 	bl	8005240 <USB_ReadInterrupts>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001900:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001904:	d112      	bne.n	800192c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b01      	cmp	r3, #1
 8001914:	d102      	bne.n	800191c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f006 f888 	bl	8007a2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800192a:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f003 fc85 	bl	8005240 <USB_ReadInterrupts>
 8001936:	4603      	mov	r3, r0
 8001938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800193c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001940:	d121      	bne.n	8001986 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001950:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001958:	2b00      	cmp	r3, #0
 800195a:	d111      	bne.n	8001980 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	f003 020f 	and.w	r2, r3, #15
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001976:	2101      	movs	r1, #1
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f006 fa55 	bl	8007e28 <HAL_PCDEx_LPM_Callback>
 800197e:	e002      	b.n	8001986 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f006 f853 	bl	8007a2c <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f003 fc58 	bl	8005240 <USB_ReadInterrupts>
 8001990:	4603      	mov	r3, r0
 8001992:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800199a:	f040 80b7 	bne.w	8001b0c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2110      	movs	r1, #16
 80019b8:	4618      	mov	r0, r3
 80019ba:	f002 fd25 	bl	8004408 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019be:	2300      	movs	r3, #0
 80019c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019c2:	e046      	b.n	8001a52 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80019c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c6:	015a      	lsls	r2, r3, #5
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	4413      	add	r3, r2
 80019cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019d0:	461a      	mov	r2, r3
 80019d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80019d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80019d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019da:	015a      	lsls	r2, r3, #5
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	4413      	add	r3, r2
 80019e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019e8:	0151      	lsls	r1, r2, #5
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	440a      	add	r2, r1
 80019ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80019f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80019f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019fa:	015a      	lsls	r2, r3, #5
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	4413      	add	r3, r2
 8001a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a04:	461a      	mov	r2, r3
 8001a06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001a0a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a0e:	015a      	lsls	r2, r3, #5
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a1c:	0151      	lsls	r1, r2, #5
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	440a      	add	r2, r1
 8001a22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001a26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001a2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a2e:	015a      	lsls	r2, r3, #5
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	4413      	add	r3, r2
 8001a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a3c:	0151      	lsls	r1, r2, #5
 8001a3e:	69fa      	ldr	r2, [r7, #28]
 8001a40:	440a      	add	r2, r1
 8001a42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001a46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001a4a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a4e:	3301      	adds	r3, #1
 8001a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	791b      	ldrb	r3, [r3, #4]
 8001a56:	461a      	mov	r2, r3
 8001a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d3b2      	bcc.n	80019c4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a6c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001a70:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7bdb      	ldrb	r3, [r3, #15]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d016      	beq.n	8001aa8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a8a:	f043 030b 	orr.w	r3, r3, #11
 8001a8e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001aa0:	f043 030b 	orr.w	r3, r3, #11
 8001aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aa6:	e015      	b.n	8001ad4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ab6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001aba:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001abe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	69fa      	ldr	r2, [r7, #28]
 8001aca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ace:	f043 030b 	orr.w	r3, r3, #11
 8001ad2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ae2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001ae6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001af6:	461a      	mov	r2, r3
 8001af8:	f003 fc66 	bl	80053c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	695a      	ldr	r2, [r3, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001b0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 fb95 	bl	8005240 <USB_ReadInterrupts>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b20:	d123      	bne.n	8001b6a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fc2b 	bl	8005382 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 fce2 	bl	80044fa <USB_GetDevSpeed>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681c      	ldr	r4, [r3, #0]
 8001b42:	f000 fef3 	bl	800292c <HAL_RCC_GetHCLKFreq>
 8001b46:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f002 f9ec 	bl	8003f2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f005 ff40 	bl	80079da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 fb66 	bl	8005240 <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d10a      	bne.n	8001b94 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f005 ff1d 	bl	80079be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f002 0208 	and.w	r2, r2, #8
 8001b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 fb51 	bl	8005240 <USB_ReadInterrupts>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba4:	2b80      	cmp	r3, #128	@ 0x80
 8001ba6:	d123      	bne.n	8001bf0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb8:	e014      	b.n	8001be4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d105      	bne.n	8001bde <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 fb0a 	bl	80021f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be0:	3301      	adds	r3, #1
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	791b      	ldrb	r3, [r3, #4]
 8001be8:	461a      	mov	r2, r3
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d3e4      	bcc.n	8001bba <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 fb23 	bl	8005240 <USB_ReadInterrupts>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c04:	d13c      	bne.n	8001c80 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c06:	2301      	movs	r3, #1
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0a:	e02b      	b.n	8001c64 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0e:	015a      	lsls	r2, r3, #5
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	3318      	adds	r3, #24
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d115      	bne.n	8001c5e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001c32:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	da12      	bge.n	8001c5e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	3317      	adds	r3, #23
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	4619      	mov	r1, r3
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 faca 	bl	80021f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	3301      	adds	r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	791b      	ldrb	r3, [r3, #4]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d3cd      	bcc.n	8001c0c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001c7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 fadb 	bl	8005240 <USB_ReadInterrupts>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c94:	d156      	bne.n	8001d44 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c96:	2301      	movs	r3, #1
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9a:	e045      	b.n	8001d28 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d12e      	bne.n	8001d22 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001cc4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	da2b      	bge.n	8001d22 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001cd6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d121      	bne.n	8001d22 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10a      	bne.n	8001d22 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d1e:	6053      	str	r3, [r2, #4]
            break;
 8001d20:	e008      	b.n	8001d34 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	3301      	adds	r3, #1
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	791b      	ldrb	r3, [r3, #4]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d3b3      	bcc.n	8001c9c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fa79 	bl	8005240 <USB_ReadInterrupts>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d58:	d10a      	bne.n	8001d70 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f005 febe 	bl	8007adc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001d6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 fa63 	bl	8005240 <USB_ReadInterrupts>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d115      	bne.n	8001db0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f005 feae 	bl	8007af8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6859      	ldr	r1, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	e000      	b.n	8001db0 <HAL_PCD_IRQHandler+0x996>
      return;
 8001dae:	bf00      	nop
    }
  }
}
 8001db0:	3734      	adds	r7, #52	@ 0x34
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd90      	pop	{r4, r7, pc}

08001db6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_PCD_SetAddress+0x1a>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e012      	b.n	8001df6 <HAL_PCD_SetAddress+0x40>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	78fa      	ldrb	r2, [r7, #3]
 8001de4:	4611      	mov	r1, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 f9c2 	bl	8005170 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	4608      	mov	r0, r1
 8001e08:	4611      	mov	r1, r2
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	70fb      	strb	r3, [r7, #3]
 8001e10:	460b      	mov	r3, r1
 8001e12:	803b      	strh	r3, [r7, #0]
 8001e14:	4613      	mov	r3, r2
 8001e16:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	da0f      	bge.n	8001e44 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	f003 020f 	and.w	r2, r3, #15
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	3310      	adds	r3, #16
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	3304      	adds	r3, #4
 8001e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	705a      	strb	r2, [r3, #1]
 8001e42:	e00f      	b.n	8001e64 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	f003 020f 	and.w	r2, r3, #15
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001e70:	883b      	ldrh	r3, [r7, #0]
 8001e72:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	78ba      	ldrb	r2, [r7, #2]
 8001e7e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	785b      	ldrb	r3, [r3, #1]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d004      	beq.n	8001e92 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e92:	78bb      	ldrb	r3, [r7, #2]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d102      	bne.n	8001e9e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_PCD_EP_Open+0xae>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e00e      	b.n	8001eca <HAL_PCD_EP_Open+0xcc>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68f9      	ldr	r1, [r7, #12]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f002 fb42 	bl	8004544 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001ec8:	7afb      	ldrb	r3, [r7, #11]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	460b      	mov	r3, r1
 8001edc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	da0f      	bge.n	8001f06 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	f003 020f 	and.w	r2, r3, #15
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	3310      	adds	r3, #16
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	3304      	adds	r3, #4
 8001efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	705a      	strb	r2, [r3, #1]
 8001f04:	e00f      	b.n	8001f26 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 020f 	and.w	r2, r3, #15
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_PCD_EP_Close+0x6e>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e00e      	b.n	8001f5e <HAL_PCD_EP_Close+0x8c>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68f9      	ldr	r1, [r7, #12]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 fb80 	bl	8004654 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	460b      	mov	r3, r1
 8001f74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f76:	7afb      	ldrb	r3, [r7, #11]
 8001f78:	f003 020f 	and.w	r2, r3, #15
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa8:	7afb      	ldrb	r3, [r7, #11]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	799b      	ldrb	r3, [r3, #6]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d102      	bne.n	8001fc2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	799b      	ldrb	r3, [r3, #6]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	6979      	ldr	r1, [r7, #20]
 8001fce:	f002 fc1d 	bl	800480c <USB_EPStartXfer>

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	f003 020f 	and.w	r2, r3, #15
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	460b      	mov	r3, r1
 800201a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800201c:	7afb      	ldrb	r3, [r7, #11]
 800201e:	f003 020f 	and.w	r2, r3, #15
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	3310      	adds	r3, #16
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	3304      	adds	r3, #4
 8002032:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2201      	movs	r2, #1
 800204a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800204c:	7afb      	ldrb	r3, [r7, #11]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	b2da      	uxtb	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	799b      	ldrb	r3, [r3, #6]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d102      	bne.n	8002066 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	799b      	ldrb	r3, [r3, #6]
 800206e:	461a      	mov	r2, r3
 8002070:	6979      	ldr	r1, [r7, #20]
 8002072:	f002 fbcb 	bl	800480c <USB_EPStartXfer>

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	7912      	ldrb	r2, [r2, #4]
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e04f      	b.n	800213e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800209e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	da0f      	bge.n	80020c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	f003 020f 	and.w	r2, r3, #15
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	3310      	adds	r3, #16
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	3304      	adds	r3, #4
 80020bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	705a      	strb	r2, [r3, #1]
 80020c4:	e00d      	b.n	80020e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	4413      	add	r3, r2
 80020d8:	3304      	adds	r3, #4
 80020da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_PCD_EP_SetStall+0x82>
 80020fe:	2302      	movs	r3, #2
 8002100:	e01d      	b.n	800213e <HAL_PCD_EP_SetStall+0xbe>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68f9      	ldr	r1, [r7, #12]
 8002110:	4618      	mov	r0, r3
 8002112:	f002 ff59 	bl	8004fc8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	2b00      	cmp	r3, #0
 800211e:	d109      	bne.n	8002134 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7999      	ldrb	r1, [r3, #6]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800212e:	461a      	mov	r2, r3
 8002130:	f003 f94a 	bl	80053c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	460b      	mov	r3, r1
 8002150:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	7912      	ldrb	r2, [r2, #4]
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e042      	b.n	80021ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002168:	2b00      	cmp	r3, #0
 800216a:	da0f      	bge.n	800218c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	f003 020f 	and.w	r2, r3, #15
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	3310      	adds	r3, #16
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	3304      	adds	r3, #4
 8002182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	705a      	strb	r2, [r3, #1]
 800218a:	e00f      	b.n	80021ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	f003 020f 	and.w	r2, r3, #15
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	3304      	adds	r3, #4
 80021a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_PCD_EP_ClrStall+0x86>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e00e      	b.n	80021ea <HAL_PCD_EP_ClrStall+0xa4>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68f9      	ldr	r1, [r7, #12]
 80021da:	4618      	mov	r0, r3
 80021dc:	f002 ff62 	bl	80050a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	460b      	mov	r3, r1
 80021fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80021fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002202:	2b00      	cmp	r3, #0
 8002204:	da0c      	bge.n	8002220 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	f003 020f 	and.w	r2, r3, #15
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	3310      	adds	r3, #16
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	3304      	adds	r3, #4
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	e00c      	b.n	800223a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	f003 020f 	and.w	r2, r3, #15
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	3304      	adds	r3, #4
 8002238:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68f9      	ldr	r1, [r7, #12]
 8002240:	4618      	mov	r0, r3
 8002242:	f002 fd81 	bl	8004d48 <USB_EPStopXfer>
 8002246:	4603      	mov	r3, r0
 8002248:	72fb      	strb	r3, [r7, #11]

  return ret;
 800224a:	7afb      	ldrb	r3, [r7, #11]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	@ 0x28
 8002258:	af02      	add	r7, sp, #8
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	4613      	mov	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	3310      	adds	r3, #16
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	4413      	add	r3, r2
 8002278:	3304      	adds	r3, #4
 800227a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	429a      	cmp	r2, r3
 8002286:	d901      	bls.n	800228c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e06b      	b.n	8002364 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d902      	bls.n	80022a8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	3303      	adds	r3, #3
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022b0:	e02a      	b.n	8002308 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d902      	bls.n	80022ce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3303      	adds	r3, #3
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	68d9      	ldr	r1, [r3, #12]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	4603      	mov	r3, r0
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f002 fdd6 	bl	8004e9c <USB_WritePacket>

    ep->xfer_buff  += len;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	441a      	add	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	441a      	add	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4413      	add	r3, r2
 8002310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	429a      	cmp	r2, r3
 800231c:	d809      	bhi.n	8002332 <PCD_WriteEmptyTxFifo+0xde>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002326:	429a      	cmp	r2, r3
 8002328:	d203      	bcs.n	8002332 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1bf      	bne.n	80022b2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	429a      	cmp	r2, r3
 800233c:	d811      	bhi.n	8002362 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	2201      	movs	r2, #1
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002352:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	43db      	mvns	r3, r3
 8002358:	6939      	ldr	r1, [r7, #16]
 800235a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800235e:	4013      	ands	r3, r2
 8002360:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3720      	adds	r7, #32
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	333c      	adds	r3, #60	@ 0x3c
 8002384:	3304      	adds	r3, #4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	4413      	add	r3, r2
 8002392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	799b      	ldrb	r3, [r3, #6]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d17b      	bne.n	800249a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d015      	beq.n	80023d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	4a61      	ldr	r2, [pc, #388]	@ (8002534 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	f240 80b9 	bls.w	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80b3 	beq.w	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ce:	461a      	mov	r2, r3
 80023d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023d4:	6093      	str	r3, [r2, #8]
 80023d6:	e0a7      	b.n	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d009      	beq.n	80023f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ee:	461a      	mov	r2, r3
 80023f0:	2320      	movs	r3, #32
 80023f2:	6093      	str	r3, [r2, #8]
 80023f4:	e098      	b.n	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 8093 	bne.w	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	4a4b      	ldr	r2, [pc, #300]	@ (8002534 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d90f      	bls.n	800242a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	4413      	add	r3, r2
 800241c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002420:	461a      	mov	r2, r3
 8002422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002426:	6093      	str	r3, [r2, #8]
 8002428:	e07e      	b.n	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	4413      	add	r3, r2
 800243c:	3304      	adds	r3, #4
 800243e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a1a      	ldr	r2, [r3, #32]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	0159      	lsls	r1, r3, #5
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	440b      	add	r3, r1
 800244c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002456:	1ad2      	subs	r2, r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d114      	bne.n	800248c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002474:	461a      	mov	r2, r3
 8002476:	2101      	movs	r1, #1
 8002478:	f002 ffa6 	bl	80053c8 <USB_EP0_OutStart>
 800247c:	e006      	b.n	800248c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	441a      	add	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	4619      	mov	r1, r3
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f005 fa5e 	bl	8007954 <HAL_PCD_DataOutStageCallback>
 8002498:	e046      	b.n	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	4a26      	ldr	r2, [pc, #152]	@ (8002538 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d124      	bne.n	80024ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024b8:	461a      	mov	r2, r3
 80024ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024be:	6093      	str	r3, [r2, #8]
 80024c0:	e032      	b.n	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024d8:	461a      	mov	r2, r3
 80024da:	2320      	movs	r3, #32
 80024dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	4619      	mov	r1, r3
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f005 fa35 	bl	8007954 <HAL_PCD_DataOutStageCallback>
 80024ea:	e01d      	b.n	8002528 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d114      	bne.n	800251c <PCD_EP_OutXfrComplete_int+0x1b0>
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	4613      	mov	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d108      	bne.n	800251c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002514:	461a      	mov	r2, r3
 8002516:	2100      	movs	r1, #0
 8002518:	f002 ff56 	bl	80053c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	4619      	mov	r1, r3
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f005 fa16 	bl	8007954 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3720      	adds	r7, #32
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	4f54300a 	.word	0x4f54300a
 8002538:	4f54310a 	.word	0x4f54310a

0800253c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	333c      	adds	r3, #60	@ 0x3c
 8002554:	3304      	adds	r3, #4
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4a15      	ldr	r2, [pc, #84]	@ (80025c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d90e      	bls.n	8002590 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002578:	2b00      	cmp	r3, #0
 800257a:	d009      	beq.n	8002590 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4413      	add	r3, r2
 8002584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002588:	461a      	mov	r2, r3
 800258a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800258e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f005 f9cd 	bl	8007930 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d90c      	bls.n	80025b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	799b      	ldrb	r3, [r3, #6]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d108      	bne.n	80025b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025b0:	461a      	mov	r2, r3
 80025b2:	2101      	movs	r1, #1
 80025b4:	f002 ff08 	bl	80053c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	4f54300a 	.word	0x4f54300a

080025c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	70fb      	strb	r3, [r7, #3]
 80025d4:	4613      	mov	r3, r2
 80025d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d107      	bne.n	80025f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025e6:	883b      	ldrh	r3, [r7, #0]
 80025e8:	0419      	lsls	r1, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80025f4:	e028      	b.n	8002648 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fc:	0c1b      	lsrs	r3, r3, #16
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	4413      	add	r3, r2
 8002602:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	e00d      	b.n	8002626 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	3340      	adds	r3, #64	@ 0x40
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	0c1b      	lsrs	r3, r3, #16
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	4413      	add	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	3301      	adds	r3, #1
 8002624:	73fb      	strb	r3, [r7, #15]
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	3b01      	subs	r3, #1
 800262c:	429a      	cmp	r2, r3
 800262e:	d3ec      	bcc.n	800260a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002630:	883b      	ldrh	r3, [r7, #0]
 8002632:	0418      	lsls	r0, r3, #16
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6819      	ldr	r1, [r3, #0]
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	3b01      	subs	r3, #1
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	4302      	orrs	r2, r0
 8002640:	3340      	adds	r3, #64	@ 0x40
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	460b      	mov	r3, r1
 8002660:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026aa:	f043 0303 	orr.w	r3, r3, #3
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	4b20      	ldr	r3, [pc, #128]	@ (8002750 <HAL_PWREx_EnableOverDrive+0x90>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002750 <HAL_PWREx_EnableOverDrive+0x90>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026da:	4b1d      	ldr	r3, [pc, #116]	@ (8002750 <HAL_PWREx_EnableOverDrive+0x90>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002754 <HAL_PWREx_EnableOverDrive+0x94>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026ec:	f7fe fa2a 	bl	8000b44 <HAL_GetTick>
 80026f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026f2:	e009      	b.n	8002708 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026f4:	f7fe fa26 	bl	8000b44 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002702:	d901      	bls.n	8002708 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e01f      	b.n	8002748 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002708:	4b13      	ldr	r3, [pc, #76]	@ (8002758 <HAL_PWREx_EnableOverDrive+0x98>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002714:	d1ee      	bne.n	80026f4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002716:	4b11      	ldr	r3, [pc, #68]	@ (800275c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002718:	2201      	movs	r2, #1
 800271a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800271c:	f7fe fa12 	bl	8000b44 <HAL_GetTick>
 8002720:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002722:	e009      	b.n	8002738 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002724:	f7fe fa0e 	bl	8000b44 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002732:	d901      	bls.n	8002738 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e007      	b.n	8002748 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002738:	4b07      	ldr	r3, [pc, #28]	@ (8002758 <HAL_PWREx_EnableOverDrive+0x98>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002740:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002744:	d1ee      	bne.n	8002724 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40023800 	.word	0x40023800
 8002754:	420e0040 	.word	0x420e0040
 8002758:	40007000 	.word	0x40007000
 800275c:	420e0044 	.word	0x420e0044

08002760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0cc      	b.n	800290e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002774:	4b68      	ldr	r3, [pc, #416]	@ (8002918 <HAL_RCC_ClockConfig+0x1b8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d90c      	bls.n	800279c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002782:	4b65      	ldr	r3, [pc, #404]	@ (8002918 <HAL_RCC_ClockConfig+0x1b8>)
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	4b63      	ldr	r3, [pc, #396]	@ (8002918 <HAL_RCC_ClockConfig+0x1b8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0b8      	b.n	800290e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d020      	beq.n	80027ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027b4:	4b59      	ldr	r3, [pc, #356]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a58      	ldr	r2, [pc, #352]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027cc:	4b53      	ldr	r3, [pc, #332]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4a52      	ldr	r2, [pc, #328]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d8:	4b50      	ldr	r3, [pc, #320]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	494d      	ldr	r1, [pc, #308]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d044      	beq.n	8002880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d107      	bne.n	800280e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	4b47      	ldr	r3, [pc, #284]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d119      	bne.n	800283e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e07f      	b.n	800290e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d003      	beq.n	800281e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800281a:	2b03      	cmp	r3, #3
 800281c:	d107      	bne.n	800282e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281e:	4b3f      	ldr	r3, [pc, #252]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e06f      	b.n	800290e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282e:	4b3b      	ldr	r3, [pc, #236]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e067      	b.n	800290e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800283e:	4b37      	ldr	r3, [pc, #220]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f023 0203 	bic.w	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4934      	ldr	r1, [pc, #208]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	4313      	orrs	r3, r2
 800284e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002850:	f7fe f978 	bl	8000b44 <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	e00a      	b.n	800286e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002858:	f7fe f974 	bl	8000b44 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e04f      	b.n	800290e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	4b2b      	ldr	r3, [pc, #172]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 020c 	and.w	r2, r3, #12
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	429a      	cmp	r2, r3
 800287e:	d1eb      	bne.n	8002858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002880:	4b25      	ldr	r3, [pc, #148]	@ (8002918 <HAL_RCC_ClockConfig+0x1b8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d20c      	bcs.n	80028a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b22      	ldr	r3, [pc, #136]	@ (8002918 <HAL_RCC_ClockConfig+0x1b8>)
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002896:	4b20      	ldr	r3, [pc, #128]	@ (8002918 <HAL_RCC_ClockConfig+0x1b8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e032      	b.n	800290e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b4:	4b19      	ldr	r3, [pc, #100]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4916      	ldr	r1, [pc, #88]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028d2:	4b12      	ldr	r3, [pc, #72]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	490e      	ldr	r1, [pc, #56]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028e6:	f000 fb57 	bl	8002f98 <HAL_RCC_GetSysClockFreq>
 80028ea:	4602      	mov	r2, r0
 80028ec:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	490a      	ldr	r1, [pc, #40]	@ (8002920 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	5ccb      	ldrb	r3, [r1, r3]
 80028fa:	fa22 f303 	lsr.w	r3, r2, r3
 80028fe:	4a09      	ldr	r2, [pc, #36]	@ (8002924 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002902:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <HAL_RCC_ClockConfig+0x1c8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe f8d8 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023c00 	.word	0x40023c00
 800291c:	40023800 	.word	0x40023800
 8002920:	08008004 	.word	0x08008004
 8002924:	20017704 	.word	0x20017704
 8002928:	20017708 	.word	0x20017708

0800292c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002930:	4b03      	ldr	r3, [pc, #12]	@ (8002940 <HAL_RCC_GetHCLKFreq+0x14>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	20017704 	.word	0x20017704

08002944 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08c      	sub	sp, #48	@ 0x30
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d010      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800297c:	4b6f      	ldr	r3, [pc, #444]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800297e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002982:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298a:	496c      	ldr	r1, [pc, #432]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800299a:	2301      	movs	r3, #1
 800299c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d010      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80029aa:	4b64      	ldr	r3, [pc, #400]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029b0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b8:	4960      	ldr	r1, [pc, #384]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80029c8:	2301      	movs	r3, #1
 80029ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d017      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029d8:	4b58      	ldr	r3, [pc, #352]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	4955      	ldr	r1, [pc, #340]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029f6:	d101      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80029f8:	2301      	movs	r3, #1
 80029fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002a04:	2301      	movs	r3, #1
 8002a06:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d017      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a14:	4b49      	ldr	r3, [pc, #292]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a22:	4946      	ldr	r1, [pc, #280]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a32:	d101      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002a34:	2301      	movs	r3, #1
 8002a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002a40:	2301      	movs	r3, #1
 8002a42:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 808a 	beq.w	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	4b39      	ldr	r3, [pc, #228]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	4a38      	ldr	r2, [pc, #224]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a62:	4b36      	ldr	r3, [pc, #216]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002a6e:	4b34      	ldr	r3, [pc, #208]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a33      	ldr	r2, [pc, #204]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a7a:	f7fe f863 	bl	8000b44 <HAL_GetTick>
 8002a7e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a82:	f7fe f85f 	bl	8000b44 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e278      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002a94:	4b2a      	ldr	r3, [pc, #168]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aa0:	4b26      	ldr	r3, [pc, #152]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aa8:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d02f      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ab8:	6a3a      	ldr	r2, [r7, #32]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d028      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002abe:	4b1f      	ldr	r3, [pc, #124]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ac6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ace:	4b1d      	ldr	r3, [pc, #116]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ad4:	4a19      	ldr	r2, [pc, #100]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ada:	4b18      	ldr	r3, [pc, #96]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d114      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7fe f82d 	bl	8000b44 <HAL_GetTick>
 8002aea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aec:	e00a      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aee:	f7fe f829 	bl	8000b44 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e240      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b04:	4b0d      	ldr	r3, [pc, #52]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ee      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b1c:	d114      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002b1e:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b32:	4902      	ldr	r1, [pc, #8]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]
 8002b38:	e00c      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40007000 	.word	0x40007000
 8002b44:	42470e40 	.word	0x42470e40
 8002b48:	4b4a      	ldr	r3, [pc, #296]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a49      	ldr	r2, [pc, #292]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b4e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002b52:	6093      	str	r3, [r2, #8]
 8002b54:	4b47      	ldr	r3, [pc, #284]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b60:	4944      	ldr	r1, [pc, #272]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d004      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002b78:	4b3f      	ldr	r3, [pc, #252]	@ (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002b7a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002b88:	4b3a      	ldr	r3, [pc, #232]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b96:	4937      	ldr	r1, [pc, #220]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002baa:	4b32      	ldr	r3, [pc, #200]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bb0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb8:	492e      	ldr	r1, [pc, #184]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d011      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bcc:	4b29      	ldr	r3, [pc, #164]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bd2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bda:	4926      	ldr	r1, [pc, #152]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002bec:	2301      	movs	r3, #1
 8002bee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c02:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0a:	491a      	ldr	r1, [pc, #104]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d011      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002c1e:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c24:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c2c:	4911      	ldr	r1, [pc, #68]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d005      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c50:	f040 80ff 	bne.w	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c54:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c5a:	f7fd ff73 	bl	8000b44 <HAL_GetTick>
 8002c5e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c60:	e00e      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c62:	f7fd ff6f 	bl	8000b44 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d907      	bls.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e188      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002c74:	40023800 	.word	0x40023800
 8002c78:	424711e0 	.word	0x424711e0
 8002c7c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c80:	4b7e      	ldr	r3, [pc, #504]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1ea      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d009      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d028      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d124      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002cb4:	4b71      	ldr	r3, [pc, #452]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cba:	0c1b      	lsrs	r3, r3, #16
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cc6:	4b6d      	ldr	r3, [pc, #436]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ccc:	0e1b      	lsrs	r3, r3, #24
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	019b      	lsls	r3, r3, #6
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	085b      	lsrs	r3, r3, #1
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	041b      	lsls	r3, r3, #16
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	061b      	lsls	r3, r3, #24
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	071b      	lsls	r3, r3, #28
 8002cf6:	4961      	ldr	r1, [pc, #388]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d004      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d035      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d28:	d130      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002d2a:	4b54      	ldr	r3, [pc, #336]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d30:	0c1b      	lsrs	r3, r3, #16
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	3301      	adds	r3, #1
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d3c:	4b4f      	ldr	r3, [pc, #316]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d42:	0f1b      	lsrs	r3, r3, #28
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	019b      	lsls	r3, r3, #6
 8002d54:	431a      	orrs	r2, r3
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	085b      	lsrs	r3, r3, #1
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	041b      	lsls	r3, r3, #16
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	431a      	orrs	r2, r3
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	071b      	lsls	r3, r3, #28
 8002d6c:	4943      	ldr	r1, [pc, #268]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d74:	4b41      	ldr	r3, [pc, #260]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d7a:	f023 021f 	bic.w	r2, r3, #31
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d82:	3b01      	subs	r3, #1
 8002d84:	493d      	ldr	r1, [pc, #244]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d029      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002da0:	d124      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002da2:	4b36      	ldr	r3, [pc, #216]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002da8:	0c1b      	lsrs	r3, r3, #16
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	3301      	adds	r3, #1
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002db4:	4b31      	ldr	r3, [pc, #196]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dba:	0f1b      	lsrs	r3, r3, #28
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	019b      	lsls	r3, r3, #6
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	041b      	lsls	r3, r3, #16
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	061b      	lsls	r3, r3, #24
 8002dde:	431a      	orrs	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	071b      	lsls	r3, r3, #28
 8002de4:	4925      	ldr	r1, [pc, #148]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d016      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	019b      	lsls	r3, r3, #6
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	041b      	lsls	r3, r3, #16
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	061b      	lsls	r3, r3, #24
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	071b      	lsls	r3, r3, #28
 8002e1e:	4917      	ldr	r1, [pc, #92]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e26:	4b16      	ldr	r3, [pc, #88]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e2c:	f7fd fe8a 	bl	8000b44 <HAL_GetTick>
 8002e30:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e34:	f7fd fe86 	bl	8000b44 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e09f      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e46:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	f040 8095 	bne.w	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e60:	f7fd fe70 	bl	8000b44 <HAL_GetTick>
 8002e64:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e66:	e00f      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e68:	f7fd fe6c 	bl	8000b44 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d908      	bls.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e085      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	42470068 	.word	0x42470068
 8002e84:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e88:	4b41      	ldr	r3, [pc, #260]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e94:	d0e8      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d02b      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d127      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002ebe:	4b34      	ldr	r3, [pc, #208]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec4:	0c1b      	lsrs	r3, r3, #16
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699a      	ldr	r2, [r3, #24]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	019b      	lsls	r3, r3, #6
 8002eda:	431a      	orrs	r2, r3
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	085b      	lsrs	r3, r3, #1
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	061b      	lsls	r3, r3, #24
 8002eec:	4928      	ldr	r1, [pc, #160]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ef4:	4b26      	ldr	r3, [pc, #152]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002efa:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f02:	3b01      	subs	r3, #1
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	4922      	ldr	r1, [pc, #136]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01d      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f22:	d118      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f24:	4b1a      	ldr	r3, [pc, #104]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2a:	0e1b      	lsrs	r3, r3, #24
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	019b      	lsls	r3, r3, #6
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	085b      	lsrs	r3, r3, #1
 8002f44:	3b01      	subs	r3, #1
 8002f46:	041b      	lsls	r3, r3, #16
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	061b      	lsls	r3, r3, #24
 8002f4e:	4910      	ldr	r1, [pc, #64]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f56:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f5c:	f7fd fdf2 	bl	8000b44 <HAL_GetTick>
 8002f60:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f64:	f7fd fdee 	bl	8000b44 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e007      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f76:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f82:	d1ef      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3730      	adds	r7, #48	@ 0x30
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800
 8002f94:	42470070 	.word	0x42470070

08002f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f9c:	b0ae      	sub	sp, #184	@ 0xb8
 8002f9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fbe:	4bcb      	ldr	r3, [pc, #812]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b0c      	cmp	r3, #12
 8002fc8:	f200 8206 	bhi.w	80033d8 <HAL_RCC_GetSysClockFreq+0x440>
 8002fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd2:	bf00      	nop
 8002fd4:	08003009 	.word	0x08003009
 8002fd8:	080033d9 	.word	0x080033d9
 8002fdc:	080033d9 	.word	0x080033d9
 8002fe0:	080033d9 	.word	0x080033d9
 8002fe4:	08003011 	.word	0x08003011
 8002fe8:	080033d9 	.word	0x080033d9
 8002fec:	080033d9 	.word	0x080033d9
 8002ff0:	080033d9 	.word	0x080033d9
 8002ff4:	08003019 	.word	0x08003019
 8002ff8:	080033d9 	.word	0x080033d9
 8002ffc:	080033d9 	.word	0x080033d9
 8003000:	080033d9 	.word	0x080033d9
 8003004:	08003209 	.word	0x08003209
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003008:	4bb9      	ldr	r3, [pc, #740]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800300a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800300e:	e1e7      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003010:	4bb8      	ldr	r3, [pc, #736]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003012:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003016:	e1e3      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003018:	4bb4      	ldr	r3, [pc, #720]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x354>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003020:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003024:	4bb1      	ldr	r3, [pc, #708]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x354>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d071      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003030:	4bae      	ldr	r3, [pc, #696]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x354>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	099b      	lsrs	r3, r3, #6
 8003036:	2200      	movs	r2, #0
 8003038:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800303c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003040:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003048:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800304c:	2300      	movs	r3, #0
 800304e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003052:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003056:	4622      	mov	r2, r4
 8003058:	462b      	mov	r3, r5
 800305a:	f04f 0000 	mov.w	r0, #0
 800305e:	f04f 0100 	mov.w	r1, #0
 8003062:	0159      	lsls	r1, r3, #5
 8003064:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003068:	0150      	lsls	r0, r2, #5
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4621      	mov	r1, r4
 8003070:	1a51      	subs	r1, r2, r1
 8003072:	6439      	str	r1, [r7, #64]	@ 0x40
 8003074:	4629      	mov	r1, r5
 8003076:	eb63 0301 	sbc.w	r3, r3, r1
 800307a:	647b      	str	r3, [r7, #68]	@ 0x44
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003088:	4649      	mov	r1, r9
 800308a:	018b      	lsls	r3, r1, #6
 800308c:	4641      	mov	r1, r8
 800308e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003092:	4641      	mov	r1, r8
 8003094:	018a      	lsls	r2, r1, #6
 8003096:	4641      	mov	r1, r8
 8003098:	1a51      	subs	r1, r2, r1
 800309a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800309c:	4649      	mov	r1, r9
 800309e:	eb63 0301 	sbc.w	r3, r3, r1
 80030a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80030b0:	4649      	mov	r1, r9
 80030b2:	00cb      	lsls	r3, r1, #3
 80030b4:	4641      	mov	r1, r8
 80030b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ba:	4641      	mov	r1, r8
 80030bc:	00ca      	lsls	r2, r1, #3
 80030be:	4610      	mov	r0, r2
 80030c0:	4619      	mov	r1, r3
 80030c2:	4603      	mov	r3, r0
 80030c4:	4622      	mov	r2, r4
 80030c6:	189b      	adds	r3, r3, r2
 80030c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80030ca:	462b      	mov	r3, r5
 80030cc:	460a      	mov	r2, r1
 80030ce:	eb42 0303 	adc.w	r3, r2, r3
 80030d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030e0:	4629      	mov	r1, r5
 80030e2:	024b      	lsls	r3, r1, #9
 80030e4:	4621      	mov	r1, r4
 80030e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030ea:	4621      	mov	r1, r4
 80030ec:	024a      	lsls	r2, r1, #9
 80030ee:	4610      	mov	r0, r2
 80030f0:	4619      	mov	r1, r3
 80030f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003100:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003104:	f7fd f87e 	bl	8000204 <__aeabi_uldivmod>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4613      	mov	r3, r2
 800310e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003112:	e067      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003114:	4b75      	ldr	r3, [pc, #468]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x354>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	099b      	lsrs	r3, r3, #6
 800311a:	2200      	movs	r2, #0
 800311c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003120:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003124:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800312e:	2300      	movs	r3, #0
 8003130:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003132:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003136:	4622      	mov	r2, r4
 8003138:	462b      	mov	r3, r5
 800313a:	f04f 0000 	mov.w	r0, #0
 800313e:	f04f 0100 	mov.w	r1, #0
 8003142:	0159      	lsls	r1, r3, #5
 8003144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003148:	0150      	lsls	r0, r2, #5
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4621      	mov	r1, r4
 8003150:	1a51      	subs	r1, r2, r1
 8003152:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003154:	4629      	mov	r1, r5
 8003156:	eb63 0301 	sbc.w	r3, r3, r1
 800315a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003168:	4649      	mov	r1, r9
 800316a:	018b      	lsls	r3, r1, #6
 800316c:	4641      	mov	r1, r8
 800316e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003172:	4641      	mov	r1, r8
 8003174:	018a      	lsls	r2, r1, #6
 8003176:	4641      	mov	r1, r8
 8003178:	ebb2 0a01 	subs.w	sl, r2, r1
 800317c:	4649      	mov	r1, r9
 800317e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800318e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003192:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003196:	4692      	mov	sl, r2
 8003198:	469b      	mov	fp, r3
 800319a:	4623      	mov	r3, r4
 800319c:	eb1a 0303 	adds.w	r3, sl, r3
 80031a0:	623b      	str	r3, [r7, #32]
 80031a2:	462b      	mov	r3, r5
 80031a4:	eb4b 0303 	adc.w	r3, fp, r3
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80031b6:	4629      	mov	r1, r5
 80031b8:	028b      	lsls	r3, r1, #10
 80031ba:	4621      	mov	r1, r4
 80031bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031c0:	4621      	mov	r1, r4
 80031c2:	028a      	lsls	r2, r1, #10
 80031c4:	4610      	mov	r0, r2
 80031c6:	4619      	mov	r1, r3
 80031c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031cc:	2200      	movs	r2, #0
 80031ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80031d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80031d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80031d6:	f7fd f815 	bl	8000204 <__aeabi_uldivmod>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4613      	mov	r3, r2
 80031e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80031e4:	4b41      	ldr	r3, [pc, #260]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x354>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	0c1b      	lsrs	r3, r3, #16
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	3301      	adds	r3, #1
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80031f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003202:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003206:	e0eb      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003208:	4b38      	ldr	r3, [pc, #224]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x354>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003210:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003214:	4b35      	ldr	r3, [pc, #212]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x354>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d06b      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003220:	4b32      	ldr	r3, [pc, #200]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x354>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	099b      	lsrs	r3, r3, #6
 8003226:	2200      	movs	r2, #0
 8003228:	66bb      	str	r3, [r7, #104]	@ 0x68
 800322a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800322c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800322e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003232:	663b      	str	r3, [r7, #96]	@ 0x60
 8003234:	2300      	movs	r3, #0
 8003236:	667b      	str	r3, [r7, #100]	@ 0x64
 8003238:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800323c:	4622      	mov	r2, r4
 800323e:	462b      	mov	r3, r5
 8003240:	f04f 0000 	mov.w	r0, #0
 8003244:	f04f 0100 	mov.w	r1, #0
 8003248:	0159      	lsls	r1, r3, #5
 800324a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800324e:	0150      	lsls	r0, r2, #5
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4621      	mov	r1, r4
 8003256:	1a51      	subs	r1, r2, r1
 8003258:	61b9      	str	r1, [r7, #24]
 800325a:	4629      	mov	r1, r5
 800325c:	eb63 0301 	sbc.w	r3, r3, r1
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800326e:	4659      	mov	r1, fp
 8003270:	018b      	lsls	r3, r1, #6
 8003272:	4651      	mov	r1, sl
 8003274:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003278:	4651      	mov	r1, sl
 800327a:	018a      	lsls	r2, r1, #6
 800327c:	4651      	mov	r1, sl
 800327e:	ebb2 0801 	subs.w	r8, r2, r1
 8003282:	4659      	mov	r1, fp
 8003284:	eb63 0901 	sbc.w	r9, r3, r1
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003294:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003298:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800329c:	4690      	mov	r8, r2
 800329e:	4699      	mov	r9, r3
 80032a0:	4623      	mov	r3, r4
 80032a2:	eb18 0303 	adds.w	r3, r8, r3
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	462b      	mov	r3, r5
 80032aa:	eb49 0303 	adc.w	r3, r9, r3
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80032bc:	4629      	mov	r1, r5
 80032be:	024b      	lsls	r3, r1, #9
 80032c0:	4621      	mov	r1, r4
 80032c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032c6:	4621      	mov	r1, r4
 80032c8:	024a      	lsls	r2, r1, #9
 80032ca:	4610      	mov	r0, r2
 80032cc:	4619      	mov	r1, r3
 80032ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032d2:	2200      	movs	r2, #0
 80032d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80032d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032dc:	f7fc ff92 	bl	8000204 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4613      	mov	r3, r2
 80032e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032ea:	e065      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x420>
 80032ec:	40023800 	.word	0x40023800
 80032f0:	00f42400 	.word	0x00f42400
 80032f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f8:	4b3d      	ldr	r3, [pc, #244]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	099b      	lsrs	r3, r3, #6
 80032fe:	2200      	movs	r2, #0
 8003300:	4618      	mov	r0, r3
 8003302:	4611      	mov	r1, r2
 8003304:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003308:	653b      	str	r3, [r7, #80]	@ 0x50
 800330a:	2300      	movs	r3, #0
 800330c:	657b      	str	r3, [r7, #84]	@ 0x54
 800330e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003312:	4642      	mov	r2, r8
 8003314:	464b      	mov	r3, r9
 8003316:	f04f 0000 	mov.w	r0, #0
 800331a:	f04f 0100 	mov.w	r1, #0
 800331e:	0159      	lsls	r1, r3, #5
 8003320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003324:	0150      	lsls	r0, r2, #5
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4641      	mov	r1, r8
 800332c:	1a51      	subs	r1, r2, r1
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	4649      	mov	r1, r9
 8003332:	eb63 0301 	sbc.w	r3, r3, r1
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003344:	4659      	mov	r1, fp
 8003346:	018b      	lsls	r3, r1, #6
 8003348:	4651      	mov	r1, sl
 800334a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800334e:	4651      	mov	r1, sl
 8003350:	018a      	lsls	r2, r1, #6
 8003352:	4651      	mov	r1, sl
 8003354:	1a54      	subs	r4, r2, r1
 8003356:	4659      	mov	r1, fp
 8003358:	eb63 0501 	sbc.w	r5, r3, r1
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	00eb      	lsls	r3, r5, #3
 8003366:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800336a:	00e2      	lsls	r2, r4, #3
 800336c:	4614      	mov	r4, r2
 800336e:	461d      	mov	r5, r3
 8003370:	4643      	mov	r3, r8
 8003372:	18e3      	adds	r3, r4, r3
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	464b      	mov	r3, r9
 8003378:	eb45 0303 	adc.w	r3, r5, r3
 800337c:	607b      	str	r3, [r7, #4]
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	e9d7 4500 	ldrd	r4, r5, [r7]
 800338a:	4629      	mov	r1, r5
 800338c:	028b      	lsls	r3, r1, #10
 800338e:	4621      	mov	r1, r4
 8003390:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003394:	4621      	mov	r1, r4
 8003396:	028a      	lsls	r2, r1, #10
 8003398:	4610      	mov	r0, r2
 800339a:	4619      	mov	r1, r3
 800339c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033a0:	2200      	movs	r2, #0
 80033a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033a4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80033a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033aa:	f7fc ff2b 	bl	8000204 <__aeabi_uldivmod>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4613      	mov	r3, r2
 80033b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033b8:	4b0d      	ldr	r3, [pc, #52]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	0f1b      	lsrs	r3, r3, #28
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80033c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80033ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033d6:	e003      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033d8:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80033da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	37b8      	adds	r7, #184	@ 0xb8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800
 80033f4:	00f42400 	.word	0x00f42400

080033f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e28d      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 8083 	beq.w	800351e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003418:	4b94      	ldr	r3, [pc, #592]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 030c 	and.w	r3, r3, #12
 8003420:	2b04      	cmp	r3, #4
 8003422:	d019      	beq.n	8003458 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003424:	4b91      	ldr	r3, [pc, #580]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 030c 	and.w	r3, r3, #12
        || \
 800342c:	2b08      	cmp	r3, #8
 800342e:	d106      	bne.n	800343e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003430:	4b8e      	ldr	r3, [pc, #568]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003438:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800343c:	d00c      	beq.n	8003458 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800343e:	4b8b      	ldr	r3, [pc, #556]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003446:	2b0c      	cmp	r3, #12
 8003448:	d112      	bne.n	8003470 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800344a:	4b88      	ldr	r3, [pc, #544]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003452:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003456:	d10b      	bne.n	8003470 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003458:	4b84      	ldr	r3, [pc, #528]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d05b      	beq.n	800351c <HAL_RCC_OscConfig+0x124>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d157      	bne.n	800351c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e25a      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003478:	d106      	bne.n	8003488 <HAL_RCC_OscConfig+0x90>
 800347a:	4b7c      	ldr	r3, [pc, #496]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a7b      	ldr	r2, [pc, #492]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 8003480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	e01d      	b.n	80034c4 <HAL_RCC_OscConfig+0xcc>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003490:	d10c      	bne.n	80034ac <HAL_RCC_OscConfig+0xb4>
 8003492:	4b76      	ldr	r3, [pc, #472]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a75      	ldr	r2, [pc, #468]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 8003498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	4b73      	ldr	r3, [pc, #460]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a72      	ldr	r2, [pc, #456]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	e00b      	b.n	80034c4 <HAL_RCC_OscConfig+0xcc>
 80034ac:	4b6f      	ldr	r3, [pc, #444]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a6e      	ldr	r2, [pc, #440]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 80034b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	4b6c      	ldr	r3, [pc, #432]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a6b      	ldr	r2, [pc, #428]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 80034be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d013      	beq.n	80034f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034cc:	f7fd fb3a 	bl	8000b44 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d4:	f7fd fb36 	bl	8000b44 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	@ 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e21f      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e6:	4b61      	ldr	r3, [pc, #388]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0xdc>
 80034f2:	e014      	b.n	800351e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fd fb26 	bl	8000b44 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034fc:	f7fd fb22 	bl	8000b44 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b64      	cmp	r3, #100	@ 0x64
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e20b      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350e:	4b57      	ldr	r3, [pc, #348]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x104>
 800351a:	e000      	b.n	800351e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d06f      	beq.n	800360a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800352a:	4b50      	ldr	r3, [pc, #320]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b00      	cmp	r3, #0
 8003534:	d017      	beq.n	8003566 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003536:	4b4d      	ldr	r3, [pc, #308]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
        || \
 800353e:	2b08      	cmp	r3, #8
 8003540:	d105      	bne.n	800354e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003542:	4b4a      	ldr	r3, [pc, #296]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800354e:	4b47      	ldr	r3, [pc, #284]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003556:	2b0c      	cmp	r3, #12
 8003558:	d11c      	bne.n	8003594 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800355a:	4b44      	ldr	r3, [pc, #272]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d116      	bne.n	8003594 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003566:	4b41      	ldr	r3, [pc, #260]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_RCC_OscConfig+0x186>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d001      	beq.n	800357e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e1d3      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357e:	4b3b      	ldr	r3, [pc, #236]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4937      	ldr	r1, [pc, #220]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003592:	e03a      	b.n	800360a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d020      	beq.n	80035de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800359c:	4b34      	ldr	r3, [pc, #208]	@ (8003670 <HAL_RCC_OscConfig+0x278>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7fd facf 	bl	8000b44 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035aa:	f7fd facb 	bl	8000b44 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e1b4      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035bc:	4b2b      	ldr	r3, [pc, #172]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c8:	4b28      	ldr	r3, [pc, #160]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4925      	ldr	r1, [pc, #148]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	600b      	str	r3, [r1, #0]
 80035dc:	e015      	b.n	800360a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035de:	4b24      	ldr	r3, [pc, #144]	@ (8003670 <HAL_RCC_OscConfig+0x278>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fd faae 	bl	8000b44 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ec:	f7fd faaa 	bl	8000b44 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e193      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fe:	4b1b      	ldr	r3, [pc, #108]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d036      	beq.n	8003684 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361e:	4b15      	ldr	r3, [pc, #84]	@ (8003674 <HAL_RCC_OscConfig+0x27c>)
 8003620:	2201      	movs	r2, #1
 8003622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7fd fa8e 	bl	8000b44 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800362c:	f7fd fa8a 	bl	8000b44 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e173      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363e:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <HAL_RCC_OscConfig+0x274>)
 8003640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x234>
 800364a:	e01b      	b.n	8003684 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800364c:	4b09      	ldr	r3, [pc, #36]	@ (8003674 <HAL_RCC_OscConfig+0x27c>)
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7fd fa77 	bl	8000b44 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003658:	e00e      	b.n	8003678 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365a:	f7fd fa73 	bl	8000b44 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d907      	bls.n	8003678 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e15c      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
 800366c:	40023800 	.word	0x40023800
 8003670:	42470000 	.word	0x42470000
 8003674:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003678:	4b8a      	ldr	r3, [pc, #552]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800367a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1ea      	bne.n	800365a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8097 	beq.w	80037c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003692:	2300      	movs	r3, #0
 8003694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003696:	4b83      	ldr	r3, [pc, #524]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	4b7f      	ldr	r3, [pc, #508]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	4a7e      	ldr	r2, [pc, #504]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 80036ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036b2:	4b7c      	ldr	r3, [pc, #496]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036be:	2301      	movs	r3, #1
 80036c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c2:	4b79      	ldr	r3, [pc, #484]	@ (80038a8 <HAL_RCC_OscConfig+0x4b0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d118      	bne.n	8003700 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ce:	4b76      	ldr	r3, [pc, #472]	@ (80038a8 <HAL_RCC_OscConfig+0x4b0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a75      	ldr	r2, [pc, #468]	@ (80038a8 <HAL_RCC_OscConfig+0x4b0>)
 80036d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036da:	f7fd fa33 	bl	8000b44 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e2:	f7fd fa2f 	bl	8000b44 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e118      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f4:	4b6c      	ldr	r3, [pc, #432]	@ (80038a8 <HAL_RCC_OscConfig+0x4b0>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x31e>
 8003708:	4b66      	ldr	r3, [pc, #408]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370c:	4a65      	ldr	r2, [pc, #404]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	6713      	str	r3, [r2, #112]	@ 0x70
 8003714:	e01c      	b.n	8003750 <HAL_RCC_OscConfig+0x358>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b05      	cmp	r3, #5
 800371c:	d10c      	bne.n	8003738 <HAL_RCC_OscConfig+0x340>
 800371e:	4b61      	ldr	r3, [pc, #388]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003722:	4a60      	ldr	r2, [pc, #384]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 8003724:	f043 0304 	orr.w	r3, r3, #4
 8003728:	6713      	str	r3, [r2, #112]	@ 0x70
 800372a:	4b5e      	ldr	r3, [pc, #376]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372e:	4a5d      	ldr	r2, [pc, #372]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	6713      	str	r3, [r2, #112]	@ 0x70
 8003736:	e00b      	b.n	8003750 <HAL_RCC_OscConfig+0x358>
 8003738:	4b5a      	ldr	r3, [pc, #360]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373c:	4a59      	ldr	r2, [pc, #356]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	6713      	str	r3, [r2, #112]	@ 0x70
 8003744:	4b57      	ldr	r3, [pc, #348]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003748:	4a56      	ldr	r2, [pc, #344]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800374a:	f023 0304 	bic.w	r3, r3, #4
 800374e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d015      	beq.n	8003784 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003758:	f7fd f9f4 	bl	8000b44 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375e:	e00a      	b.n	8003776 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003760:	f7fd f9f0 	bl	8000b44 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e0d7      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003776:	4b4b      	ldr	r3, [pc, #300]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0ee      	beq.n	8003760 <HAL_RCC_OscConfig+0x368>
 8003782:	e014      	b.n	80037ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fd f9de 	bl	8000b44 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378c:	f7fd f9da 	bl	8000b44 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e0c1      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a2:	4b40      	ldr	r3, [pc, #256]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1ee      	bne.n	800378c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b4:	4b3b      	ldr	r3, [pc, #236]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	4a3a      	ldr	r2, [pc, #232]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 80037ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80ad 	beq.w	8003924 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ca:	4b36      	ldr	r3, [pc, #216]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d060      	beq.n	8003898 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d145      	bne.n	800386a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	4b33      	ldr	r3, [pc, #204]	@ (80038ac <HAL_RCC_OscConfig+0x4b4>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fd f9ae 	bl	8000b44 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fd f9aa 	bl	8000b44 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e093      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fe:	4b29      	ldr	r3, [pc, #164]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69da      	ldr	r2, [r3, #28]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	019b      	lsls	r3, r3, #6
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	3b01      	subs	r3, #1
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382c:	061b      	lsls	r3, r3, #24
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003834:	071b      	lsls	r3, r3, #28
 8003836:	491b      	ldr	r1, [pc, #108]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800383c:	4b1b      	ldr	r3, [pc, #108]	@ (80038ac <HAL_RCC_OscConfig+0x4b4>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003842:	f7fd f97f 	bl	8000b44 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384a:	f7fd f97b 	bl	8000b44 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e064      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385c:	4b11      	ldr	r3, [pc, #68]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x452>
 8003868:	e05c      	b.n	8003924 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386a:	4b10      	ldr	r3, [pc, #64]	@ (80038ac <HAL_RCC_OscConfig+0x4b4>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fd f968 	bl	8000b44 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003878:	f7fd f964 	bl	8000b44 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e04d      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x480>
 8003896:	e045      	b.n	8003924 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d107      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e040      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40007000 	.word	0x40007000
 80038ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003930 <HAL_RCC_OscConfig+0x538>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d030      	beq.n	8003920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d129      	bne.n	8003920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d122      	bne.n	8003920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038e0:	4013      	ands	r3, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d119      	bne.n	8003920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f6:	085b      	lsrs	r3, r3, #1
 80038f8:	3b01      	subs	r3, #1
 80038fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d10f      	bne.n	8003920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d107      	bne.n	8003920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800

08003934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e041      	b.n	80039ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fd f83a 	bl	80009d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f000 f9b6 	bl	8003ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d001      	beq.n	80039ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e04e      	b.n	8003a8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a23      	ldr	r2, [pc, #140]	@ (8003a98 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d022      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a16:	d01d      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8003a9c <HAL_TIM_Base_Start_IT+0xc8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d018      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d013      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00e      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003aa8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d009      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a19      	ldr	r2, [pc, #100]	@ (8003aac <HAL_TIM_Base_Start_IT+0xd8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d004      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0x80>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a18      	ldr	r2, [pc, #96]	@ (8003ab0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d111      	bne.n	8003a78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b06      	cmp	r3, #6
 8003a64:	d010      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a76:	e007      	b.n	8003a88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	40000400 	.word	0x40000400
 8003aa0:	40000800 	.word	0x40000800
 8003aa4:	40000c00 	.word	0x40000c00
 8003aa8:	40010400 	.word	0x40010400
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	40001800 	.word	0x40001800

08003ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d020      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01b      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0202 	mvn.w	r2, #2
 8003ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f8d2 	bl	8003ca8 <HAL_TIM_IC_CaptureCallback>
 8003b04:	e005      	b.n	8003b12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8c4 	bl	8003c94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f8d5 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d020      	beq.n	8003b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01b      	beq.n	8003b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0204 	mvn.w	r2, #4
 8003b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f8ac 	bl	8003ca8 <HAL_TIM_IC_CaptureCallback>
 8003b50:	e005      	b.n	8003b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f89e 	bl	8003c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f8af 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d020      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01b      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0208 	mvn.w	r2, #8
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2204      	movs	r2, #4
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f886 	bl	8003ca8 <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f878 	bl	8003c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f889 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d020      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01b      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0210 	mvn.w	r2, #16
 8003bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f860 	bl	8003ca8 <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f852 	bl	8003c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f863 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00c      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0201 	mvn.w	r2, #1
 8003c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fc fdbe 	bl	800079c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00c      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f906 	bl	8003e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00c      	beq.n	8003c68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f834 	bl	8003cd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00c      	beq.n	8003c8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0220 	mvn.w	r2, #32
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f8d8 	bl	8003e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a46      	ldr	r2, [pc, #280]	@ (8003e10 <TIM_Base_SetConfig+0x12c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d013      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d02:	d00f      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a43      	ldr	r2, [pc, #268]	@ (8003e14 <TIM_Base_SetConfig+0x130>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00b      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a42      	ldr	r2, [pc, #264]	@ (8003e18 <TIM_Base_SetConfig+0x134>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d007      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a41      	ldr	r2, [pc, #260]	@ (8003e1c <TIM_Base_SetConfig+0x138>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a40      	ldr	r2, [pc, #256]	@ (8003e20 <TIM_Base_SetConfig+0x13c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d108      	bne.n	8003d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a35      	ldr	r2, [pc, #212]	@ (8003e10 <TIM_Base_SetConfig+0x12c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d02b      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d44:	d027      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a32      	ldr	r2, [pc, #200]	@ (8003e14 <TIM_Base_SetConfig+0x130>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d023      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a31      	ldr	r2, [pc, #196]	@ (8003e18 <TIM_Base_SetConfig+0x134>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d01f      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a30      	ldr	r2, [pc, #192]	@ (8003e1c <TIM_Base_SetConfig+0x138>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d01b      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a2f      	ldr	r2, [pc, #188]	@ (8003e20 <TIM_Base_SetConfig+0x13c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d017      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2e      	ldr	r2, [pc, #184]	@ (8003e24 <TIM_Base_SetConfig+0x140>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2d      	ldr	r2, [pc, #180]	@ (8003e28 <TIM_Base_SetConfig+0x144>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00f      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2c      	ldr	r2, [pc, #176]	@ (8003e2c <TIM_Base_SetConfig+0x148>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00b      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a2b      	ldr	r2, [pc, #172]	@ (8003e30 <TIM_Base_SetConfig+0x14c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d007      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a2a      	ldr	r2, [pc, #168]	@ (8003e34 <TIM_Base_SetConfig+0x150>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d003      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a29      	ldr	r2, [pc, #164]	@ (8003e38 <TIM_Base_SetConfig+0x154>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d108      	bne.n	8003da8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a10      	ldr	r2, [pc, #64]	@ (8003e10 <TIM_Base_SetConfig+0x12c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <TIM_Base_SetConfig+0xf8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a12      	ldr	r2, [pc, #72]	@ (8003e20 <TIM_Base_SetConfig+0x13c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d103      	bne.n	8003de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d105      	bne.n	8003e02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f023 0201 	bic.w	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	611a      	str	r2, [r3, #16]
  }
}
 8003e02:	bf00      	nop
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40010000 	.word	0x40010000
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800
 8003e1c:	40000c00 	.word	0x40000c00
 8003e20:	40010400 	.word	0x40010400
 8003e24:	40014000 	.word	0x40014000
 8003e28:	40014400 	.word	0x40014400
 8003e2c:	40014800 	.word	0x40014800
 8003e30:	40001800 	.word	0x40001800
 8003e34:	40001c00 	.word	0x40001c00
 8003e38:	40002000 	.word	0x40002000

08003e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e64:	b084      	sub	sp, #16
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	f107 001c 	add.w	r0, r7, #28
 8003e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e76:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d123      	bne.n	8003ec6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003e92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ea6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d105      	bne.n	8003eba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f001 fae2 	bl	8005484 <USB_CoreReset>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	73fb      	strb	r3, [r7, #15]
 8003ec4:	e01b      	b.n	8003efe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f001 fad6 	bl	8005484 <USB_CoreReset>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003edc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d106      	bne.n	8003ef2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ef0:	e005      	b.n	8003efe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003efe:	7fbb      	ldrb	r3, [r7, #30]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d10b      	bne.n	8003f1c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f043 0206 	orr.w	r2, r3, #6
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f043 0220 	orr.w	r2, r3, #32
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f28:	b004      	add	sp, #16
 8003f2a:	4770      	bx	lr

08003f2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	4613      	mov	r3, r2
 8003f38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d165      	bne.n	800400c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4a41      	ldr	r2, [pc, #260]	@ (8004048 <USB_SetTurnaroundTime+0x11c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d906      	bls.n	8003f56 <USB_SetTurnaroundTime+0x2a>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4a40      	ldr	r2, [pc, #256]	@ (800404c <USB_SetTurnaroundTime+0x120>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d202      	bcs.n	8003f56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003f50:	230f      	movs	r3, #15
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	e062      	b.n	800401c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4a3c      	ldr	r2, [pc, #240]	@ (800404c <USB_SetTurnaroundTime+0x120>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d306      	bcc.n	8003f6c <USB_SetTurnaroundTime+0x40>
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4a3b      	ldr	r2, [pc, #236]	@ (8004050 <USB_SetTurnaroundTime+0x124>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d202      	bcs.n	8003f6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f66:	230e      	movs	r3, #14
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	e057      	b.n	800401c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4a38      	ldr	r2, [pc, #224]	@ (8004050 <USB_SetTurnaroundTime+0x124>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d306      	bcc.n	8003f82 <USB_SetTurnaroundTime+0x56>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4a37      	ldr	r2, [pc, #220]	@ (8004054 <USB_SetTurnaroundTime+0x128>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d202      	bcs.n	8003f82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003f7c:	230d      	movs	r3, #13
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	e04c      	b.n	800401c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	4a33      	ldr	r2, [pc, #204]	@ (8004054 <USB_SetTurnaroundTime+0x128>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d306      	bcc.n	8003f98 <USB_SetTurnaroundTime+0x6c>
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4a32      	ldr	r2, [pc, #200]	@ (8004058 <USB_SetTurnaroundTime+0x12c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d802      	bhi.n	8003f98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f92:	230c      	movs	r3, #12
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	e041      	b.n	800401c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8004058 <USB_SetTurnaroundTime+0x12c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d906      	bls.n	8003fae <USB_SetTurnaroundTime+0x82>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4a2e      	ldr	r2, [pc, #184]	@ (800405c <USB_SetTurnaroundTime+0x130>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d802      	bhi.n	8003fae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003fa8:	230b      	movs	r3, #11
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	e036      	b.n	800401c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800405c <USB_SetTurnaroundTime+0x130>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d906      	bls.n	8003fc4 <USB_SetTurnaroundTime+0x98>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	4a29      	ldr	r2, [pc, #164]	@ (8004060 <USB_SetTurnaroundTime+0x134>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d802      	bhi.n	8003fc4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003fbe:	230a      	movs	r3, #10
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	e02b      	b.n	800401c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4a26      	ldr	r2, [pc, #152]	@ (8004060 <USB_SetTurnaroundTime+0x134>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d906      	bls.n	8003fda <USB_SetTurnaroundTime+0xae>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4a25      	ldr	r2, [pc, #148]	@ (8004064 <USB_SetTurnaroundTime+0x138>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d202      	bcs.n	8003fda <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003fd4:	2309      	movs	r3, #9
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	e020      	b.n	800401c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4a21      	ldr	r2, [pc, #132]	@ (8004064 <USB_SetTurnaroundTime+0x138>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d306      	bcc.n	8003ff0 <USB_SetTurnaroundTime+0xc4>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4a20      	ldr	r2, [pc, #128]	@ (8004068 <USB_SetTurnaroundTime+0x13c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d802      	bhi.n	8003ff0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003fea:	2308      	movs	r3, #8
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	e015      	b.n	800401c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8004068 <USB_SetTurnaroundTime+0x13c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d906      	bls.n	8004006 <USB_SetTurnaroundTime+0xda>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800406c <USB_SetTurnaroundTime+0x140>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d202      	bcs.n	8004006 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004000:	2307      	movs	r3, #7
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e00a      	b.n	800401c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004006:	2306      	movs	r3, #6
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	e007      	b.n	800401c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004012:	2309      	movs	r3, #9
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	e001      	b.n	800401c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004018:	2309      	movs	r3, #9
 800401a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	029b      	lsls	r3, r3, #10
 8004030:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004034:	431a      	orrs	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	00d8acbf 	.word	0x00d8acbf
 800404c:	00e4e1c0 	.word	0x00e4e1c0
 8004050:	00f42400 	.word	0x00f42400
 8004054:	01067380 	.word	0x01067380
 8004058:	011a499f 	.word	0x011a499f
 800405c:	01312cff 	.word	0x01312cff
 8004060:	014ca43f 	.word	0x014ca43f
 8004064:	016e3600 	.word	0x016e3600
 8004068:	01a6ab1f 	.word	0x01a6ab1f
 800406c:	01e84800 	.word	0x01e84800

08004070 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f043 0201 	orr.w	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f023 0201 	bic.w	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d115      	bne.n	8004102 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80040e2:	200a      	movs	r0, #10
 80040e4:	f7fc fd3a 	bl	8000b5c <HAL_Delay>
      ms += 10U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	330a      	adds	r3, #10
 80040ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f001 f939 	bl	8005366 <USB_GetMode>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d01e      	beq.n	8004138 <USB_SetCurrentMode+0x84>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80040fe:	d9f0      	bls.n	80040e2 <USB_SetCurrentMode+0x2e>
 8004100:	e01a      	b.n	8004138 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d115      	bne.n	8004134 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004114:	200a      	movs	r0, #10
 8004116:	f7fc fd21 	bl	8000b5c <HAL_Delay>
      ms += 10U;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	330a      	adds	r3, #10
 800411e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f001 f920 	bl	8005366 <USB_GetMode>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <USB_SetCurrentMode+0x84>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004130:	d9f0      	bls.n	8004114 <USB_SetCurrentMode+0x60>
 8004132:	e001      	b.n	8004138 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e005      	b.n	8004144 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2bc8      	cmp	r3, #200	@ 0xc8
 800413c:	d101      	bne.n	8004142 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800414c:	b084      	sub	sp, #16
 800414e:	b580      	push	{r7, lr}
 8004150:	b086      	sub	sp, #24
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800415a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004166:	2300      	movs	r3, #0
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	e009      	b.n	8004180 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	3340      	adds	r3, #64	@ 0x40
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	2200      	movs	r2, #0
 8004178:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	3301      	adds	r3, #1
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2b0e      	cmp	r3, #14
 8004184:	d9f2      	bls.n	800416c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004186:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800418a:	2b00      	cmp	r3, #0
 800418c:	d11c      	bne.n	80041c8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800419c:	f043 0302 	orr.w	r3, r3, #2
 80041a0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e005      	b.n	80041d4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80041da:	461a      	mov	r2, r3
 80041dc:	2300      	movs	r3, #0
 80041de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d10d      	bne.n	8004204 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d104      	bne.n	80041fa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041f0:	2100      	movs	r1, #0
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f968 	bl	80044c8 <USB_SetDevSpeed>
 80041f8:	e008      	b.n	800420c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041fa:	2101      	movs	r1, #1
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f963 	bl	80044c8 <USB_SetDevSpeed>
 8004202:	e003      	b.n	800420c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004204:	2103      	movs	r1, #3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f95e 	bl	80044c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800420c:	2110      	movs	r1, #16
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f8fa 	bl	8004408 <USB_FlushTxFifo>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f924 	bl	800446c <USB_FlushRxFifo>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004234:	461a      	mov	r2, r3
 8004236:	2300      	movs	r3, #0
 8004238:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004240:	461a      	mov	r2, r3
 8004242:	2300      	movs	r3, #0
 8004244:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800424c:	461a      	mov	r2, r3
 800424e:	2300      	movs	r3, #0
 8004250:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004252:	2300      	movs	r3, #0
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	e043      	b.n	80042e0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800426a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800426e:	d118      	bne.n	80042a2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004282:	461a      	mov	r2, r3
 8004284:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	e013      	b.n	80042b4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004298:	461a      	mov	r2, r3
 800429a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	e008      	b.n	80042b4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042ae:	461a      	mov	r2, r3
 80042b0:	2300      	movs	r3, #0
 80042b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042c0:	461a      	mov	r2, r3
 80042c2:	2300      	movs	r3, #0
 80042c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042d2:	461a      	mov	r2, r3
 80042d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80042d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	3301      	adds	r3, #1
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80042e4:	461a      	mov	r2, r3
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d3b5      	bcc.n	8004258 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042ec:	2300      	movs	r3, #0
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	e043      	b.n	800437a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004304:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004308:	d118      	bne.n	800433c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10a      	bne.n	8004326 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800431c:	461a      	mov	r2, r3
 800431e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	e013      	b.n	800434e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004332:	461a      	mov	r2, r3
 8004334:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	e008      	b.n	800434e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004348:	461a      	mov	r2, r3
 800434a:	2300      	movs	r3, #0
 800434c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800435a:	461a      	mov	r2, r3
 800435c:	2300      	movs	r3, #0
 800435e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800436c:	461a      	mov	r2, r3
 800436e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004372:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	3301      	adds	r3, #1
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800437e:	461a      	mov	r2, r3
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4293      	cmp	r3, r2
 8004384:	d3b5      	bcc.n	80042f2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004394:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004398:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80043a6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d105      	bne.n	80043bc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f043 0210 	orr.w	r2, r3, #16
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699a      	ldr	r2, [r3, #24]
 80043c0:	4b10      	ldr	r3, [pc, #64]	@ (8004404 <USB_DevInit+0x2b8>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f043 0208 	orr.w	r2, r3, #8
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d107      	bne.n	80043f4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043ec:	f043 0304 	orr.w	r3, r3, #4
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004400:	b004      	add	sp, #16
 8004402:	4770      	bx	lr
 8004404:	803c3800 	.word	0x803c3800

08004408 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3301      	adds	r3, #1
 800441a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004422:	d901      	bls.n	8004428 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e01b      	b.n	8004460 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	daf2      	bge.n	8004416 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	019b      	lsls	r3, r3, #6
 8004438:	f043 0220 	orr.w	r2, r3, #32
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3301      	adds	r3, #1
 8004444:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800444c:	d901      	bls.n	8004452 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e006      	b.n	8004460 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b20      	cmp	r3, #32
 800445c:	d0f0      	beq.n	8004440 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3301      	adds	r3, #1
 800447c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004484:	d901      	bls.n	800448a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e018      	b.n	80044bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	daf2      	bge.n	8004478 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2210      	movs	r2, #16
 800449a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3301      	adds	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044a8:	d901      	bls.n	80044ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e006      	b.n	80044bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d0f0      	beq.n	800449c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	68f9      	ldr	r1, [r7, #12]
 80044e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044e8:	4313      	orrs	r3, r2
 80044ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b087      	sub	sp, #28
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 0306 	and.w	r3, r3, #6
 8004512:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800451a:	2300      	movs	r3, #0
 800451c:	75fb      	strb	r3, [r7, #23]
 800451e:	e00a      	b.n	8004536 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d002      	beq.n	800452c <USB_GetDevSpeed+0x32>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b06      	cmp	r3, #6
 800452a:	d102      	bne.n	8004532 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800452c:	2302      	movs	r3, #2
 800452e:	75fb      	strb	r3, [r7, #23]
 8004530:	e001      	b.n	8004536 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004532:	230f      	movs	r3, #15
 8004534:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004536:	7dfb      	ldrb	r3, [r7, #23]
}
 8004538:	4618      	mov	r0, r3
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	785b      	ldrb	r3, [r3, #1]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d13a      	bne.n	80045d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004566:	69da      	ldr	r2, [r3, #28]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	f003 030f 	and.w	r3, r3, #15
 8004570:	2101      	movs	r1, #1
 8004572:	fa01 f303 	lsl.w	r3, r1, r3
 8004576:	b29b      	uxth	r3, r3
 8004578:	68f9      	ldr	r1, [r7, #12]
 800457a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800457e:	4313      	orrs	r3, r2
 8004580:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d155      	bne.n	8004644 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	791b      	ldrb	r3, [r3, #4]
 80045b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	059b      	lsls	r3, r3, #22
 80045ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045bc:	4313      	orrs	r3, r2
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	0151      	lsls	r1, r2, #5
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	440a      	add	r2, r1
 80045c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	e036      	b.n	8004644 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045dc:	69da      	ldr	r2, [r3, #28]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	2101      	movs	r1, #1
 80045e8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ec:	041b      	lsls	r3, r3, #16
 80045ee:	68f9      	ldr	r1, [r7, #12]
 80045f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045f4:	4313      	orrs	r3, r2
 80045f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d11a      	bne.n	8004644 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	791b      	ldrb	r3, [r3, #4]
 8004628:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800462a:	430b      	orrs	r3, r1
 800462c:	4313      	orrs	r3, r2
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	0151      	lsls	r1, r2, #5
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	440a      	add	r2, r1
 8004636:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800463a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800463e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004642:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	785b      	ldrb	r3, [r3, #1]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d161      	bne.n	8004734 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004682:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004686:	d11f      	bne.n	80046c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	0151      	lsls	r1, r2, #5
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	440a      	add	r2, r1
 800469e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80046a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	2101      	movs	r1, #1
 80046da:	fa01 f303 	lsl.w	r3, r1, r3
 80046de:	b29b      	uxth	r3, r3
 80046e0:	43db      	mvns	r3, r3
 80046e2:	68f9      	ldr	r1, [r7, #12]
 80046e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046e8:	4013      	ands	r3, r2
 80046ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046f2:	69da      	ldr	r2, [r3, #28]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	2101      	movs	r1, #1
 80046fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004702:	b29b      	uxth	r3, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	68f9      	ldr	r1, [r7, #12]
 8004708:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800470c:	4013      	ands	r3, r2
 800470e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	0159      	lsls	r1, r3, #5
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	440b      	add	r3, r1
 8004726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800472a:	4619      	mov	r1, r3
 800472c:	4b35      	ldr	r3, [pc, #212]	@ (8004804 <USB_DeactivateEndpoint+0x1b0>)
 800472e:	4013      	ands	r3, r2
 8004730:	600b      	str	r3, [r1, #0]
 8004732:	e060      	b.n	80047f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004746:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800474a:	d11f      	bne.n	800478c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	0151      	lsls	r1, r2, #5
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	440a      	add	r2, r1
 8004762:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004766:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800476a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	0151      	lsls	r1, r2, #5
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	440a      	add	r2, r1
 8004782:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004786:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800478a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004792:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	2101      	movs	r1, #1
 800479e:	fa01 f303 	lsl.w	r3, r1, r3
 80047a2:	041b      	lsls	r3, r3, #16
 80047a4:	43db      	mvns	r3, r3
 80047a6:	68f9      	ldr	r1, [r7, #12]
 80047a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047ac:	4013      	ands	r3, r2
 80047ae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	2101      	movs	r1, #1
 80047c2:	fa01 f303 	lsl.w	r3, r1, r3
 80047c6:	041b      	lsls	r3, r3, #16
 80047c8:	43db      	mvns	r3, r3
 80047ca:	68f9      	ldr	r1, [r7, #12]
 80047cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047d0:	4013      	ands	r3, r2
 80047d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	0159      	lsls	r1, r3, #5
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	440b      	add	r3, r1
 80047ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ee:	4619      	mov	r1, r3
 80047f0:	4b05      	ldr	r3, [pc, #20]	@ (8004808 <USB_DeactivateEndpoint+0x1b4>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	ec337800 	.word	0xec337800
 8004808:	eff37800 	.word	0xeff37800

0800480c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08a      	sub	sp, #40	@ 0x28
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	4613      	mov	r3, r2
 8004818:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	785b      	ldrb	r3, [r3, #1]
 8004828:	2b01      	cmp	r3, #1
 800482a:	f040 817f 	bne.w	8004b2c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d132      	bne.n	800489c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	0151      	lsls	r1, r2, #5
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	440a      	add	r2, r1
 800484c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004850:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004854:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004858:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	0151      	lsls	r1, r2, #5
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	440a      	add	r2, r1
 8004870:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004874:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004878:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	0151      	lsls	r1, r2, #5
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	440a      	add	r2, r1
 8004890:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004894:	0cdb      	lsrs	r3, r3, #19
 8004896:	04db      	lsls	r3, r3, #19
 8004898:	6113      	str	r3, [r2, #16]
 800489a:	e097      	b.n	80049cc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	0151      	lsls	r1, r2, #5
 80048ae:	69fa      	ldr	r2, [r7, #28]
 80048b0:	440a      	add	r2, r1
 80048b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048b6:	0cdb      	lsrs	r3, r3, #19
 80048b8:	04db      	lsls	r3, r3, #19
 80048ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	0151      	lsls	r1, r2, #5
 80048ce:	69fa      	ldr	r2, [r7, #28]
 80048d0:	440a      	add	r2, r1
 80048d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048d6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80048da:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80048de:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d11a      	bne.n	800491c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d903      	bls.n	80048fa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	0151      	lsls	r1, r2, #5
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	440a      	add	r2, r1
 8004910:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004914:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004918:	6113      	str	r3, [r2, #16]
 800491a:	e044      	b.n	80049a6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	4413      	add	r3, r2
 8004926:	1e5a      	subs	r2, r3, #1
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004930:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	8afb      	ldrh	r3, [r7, #22]
 8004942:	04d9      	lsls	r1, r3, #19
 8004944:	4ba4      	ldr	r3, [pc, #656]	@ (8004bd8 <USB_EPStartXfer+0x3cc>)
 8004946:	400b      	ands	r3, r1
 8004948:	69b9      	ldr	r1, [r7, #24]
 800494a:	0148      	lsls	r0, r1, #5
 800494c:	69f9      	ldr	r1, [r7, #28]
 800494e:	4401      	add	r1, r0
 8004950:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004954:	4313      	orrs	r3, r2
 8004956:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	791b      	ldrb	r3, [r3, #4]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d122      	bne.n	80049a6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	0151      	lsls	r1, r2, #5
 8004972:	69fa      	ldr	r2, [r7, #28]
 8004974:	440a      	add	r2, r1
 8004976:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800497a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800497e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	8afb      	ldrh	r3, [r7, #22]
 8004990:	075b      	lsls	r3, r3, #29
 8004992:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004996:	69b9      	ldr	r1, [r7, #24]
 8004998:	0148      	lsls	r0, r1, #5
 800499a:	69f9      	ldr	r1, [r7, #28]
 800499c:	4401      	add	r1, r0
 800499e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80049a2:	4313      	orrs	r3, r2
 80049a4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049bc:	69b9      	ldr	r1, [r7, #24]
 80049be:	0148      	lsls	r0, r1, #5
 80049c0:	69f9      	ldr	r1, [r7, #28]
 80049c2:	4401      	add	r1, r0
 80049c4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80049c8:	4313      	orrs	r3, r2
 80049ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d14b      	bne.n	8004a6a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d009      	beq.n	80049ee <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049e6:	461a      	mov	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	791b      	ldrb	r3, [r3, #4]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d128      	bne.n	8004a48 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d110      	bne.n	8004a28 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	0151      	lsls	r1, r2, #5
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	440a      	add	r2, r1
 8004a1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	e00f      	b.n	8004a48 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	0151      	lsls	r1, r2, #5
 8004a3a:	69fa      	ldr	r2, [r7, #28]
 8004a3c:	440a      	add	r2, r1
 8004a3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a46:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	0151      	lsls	r1, r2, #5
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	440a      	add	r2, r1
 8004a5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a62:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	e166      	b.n	8004d38 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	0151      	lsls	r1, r2, #5
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	440a      	add	r2, r1
 8004a80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a84:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004a88:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	791b      	ldrb	r3, [r3, #4]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d015      	beq.n	8004abe <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 814e 	beq.w	8004d38 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	2101      	movs	r1, #1
 8004aae:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab2:	69f9      	ldr	r1, [r7, #28]
 8004ab4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	634b      	str	r3, [r1, #52]	@ 0x34
 8004abc:	e13c      	b.n	8004d38 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d110      	bne.n	8004af0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ae8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	e00f      	b.n	8004b10 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	0151      	lsls	r1, r2, #5
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	440a      	add	r2, r1
 8004b06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b0e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	68d9      	ldr	r1, [r3, #12]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	781a      	ldrb	r2, [r3, #0]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	b298      	uxth	r0, r3
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	4603      	mov	r3, r0
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f9b9 	bl	8004e9c <USB_WritePacket>
 8004b2a:	e105      	b.n	8004d38 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	0151      	lsls	r1, r2, #5
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	440a      	add	r2, r1
 8004b42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b46:	0cdb      	lsrs	r3, r3, #19
 8004b48:	04db      	lsls	r3, r3, #19
 8004b4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b66:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004b6a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004b6e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d132      	bne.n	8004bdc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba4:	69b9      	ldr	r1, [r7, #24]
 8004ba6:	0148      	lsls	r0, r1, #5
 8004ba8:	69f9      	ldr	r1, [r7, #28]
 8004baa:	4401      	add	r1, r0
 8004bac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bd2:	6113      	str	r3, [r2, #16]
 8004bd4:	e062      	b.n	8004c9c <USB_EPStartXfer+0x490>
 8004bd6:	bf00      	nop
 8004bd8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d123      	bne.n	8004c2c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bfa:	69b9      	ldr	r1, [r7, #24]
 8004bfc:	0148      	lsls	r0, r1, #5
 8004bfe:	69f9      	ldr	r1, [r7, #28]
 8004c00:	4401      	add	r1, r0
 8004c02:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c06:	4313      	orrs	r3, r2
 8004c08:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c28:	6113      	str	r3, [r2, #16]
 8004c2a:	e037      	b.n	8004c9c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4413      	add	r3, r2
 8004c36:	1e5a      	subs	r2, r3, #1
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	8afa      	ldrh	r2, [r7, #22]
 8004c48:	fb03 f202 	mul.w	r2, r3, r2
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	8afb      	ldrh	r3, [r7, #22]
 8004c60:	04d9      	lsls	r1, r3, #19
 8004c62:	4b38      	ldr	r3, [pc, #224]	@ (8004d44 <USB_EPStartXfer+0x538>)
 8004c64:	400b      	ands	r3, r1
 8004c66:	69b9      	ldr	r1, [r7, #24]
 8004c68:	0148      	lsls	r0, r1, #5
 8004c6a:	69f9      	ldr	r1, [r7, #28]
 8004c6c:	4401      	add	r1, r0
 8004c6e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c72:	4313      	orrs	r3, r2
 8004c74:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c8c:	69b9      	ldr	r1, [r7, #24]
 8004c8e:	0148      	lsls	r0, r1, #5
 8004c90:	69f9      	ldr	r1, [r7, #28]
 8004c92:	4401      	add	r1, r0
 8004c94:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d10d      	bne.n	8004cbe <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	68d9      	ldr	r1, [r3, #12]
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cba:	460a      	mov	r2, r1
 8004cbc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	791b      	ldrb	r3, [r3, #4]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d128      	bne.n	8004d18 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d110      	bne.n	8004cf8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	0151      	lsls	r1, r2, #5
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	440a      	add	r2, r1
 8004cec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cf0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e00f      	b.n	8004d18 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	0151      	lsls	r1, r2, #5
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	440a      	add	r2, r1
 8004d0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d16:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	0151      	lsls	r1, r2, #5
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	440a      	add	r2, r1
 8004d2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d32:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004d36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3720      	adds	r7, #32
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	1ff80000 	.word	0x1ff80000

08004d48 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	785b      	ldrb	r3, [r3, #1]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d14a      	bne.n	8004dfc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d7e:	f040 8086 	bne.w	8004e8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	7812      	ldrb	r2, [r2, #0]
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004da0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004da4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	7812      	ldrb	r2, [r2, #0]
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dc4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004dc8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d902      	bls.n	8004de0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	75fb      	strb	r3, [r7, #23]
          break;
 8004dde:	e056      	b.n	8004e8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004df4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004df8:	d0e7      	beq.n	8004dca <USB_EPStopXfer+0x82>
 8004dfa:	e048      	b.n	8004e8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e14:	d13b      	bne.n	8004e8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	7812      	ldrb	r2, [r2, #0]
 8004e2a:	0151      	lsls	r1, r2, #5
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	440a      	add	r2, r1
 8004e30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e34:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	7812      	ldrb	r2, [r2, #0]
 8004e4e:	0151      	lsls	r1, r2, #5
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	440a      	add	r2, r1
 8004e54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3301      	adds	r3, #1
 8004e62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d902      	bls.n	8004e74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	75fb      	strb	r3, [r7, #23]
          break;
 8004e72:	e00c      	b.n	8004e8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e8c:	d0e7      	beq.n	8004e5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b089      	sub	sp, #36	@ 0x24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	460b      	mov	r3, r1
 8004eac:	71fb      	strb	r3, [r7, #7]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004eba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d123      	bne.n	8004f0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ec2:	88bb      	ldrh	r3, [r7, #4]
 8004ec4:	3303      	adds	r3, #3
 8004ec6:	089b      	lsrs	r3, r3, #2
 8004ec8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	e018      	b.n	8004f02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	031a      	lsls	r2, r3, #12
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004edc:	461a      	mov	r2, r3
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	3301      	adds	r3, #1
 8004eee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	3301      	adds	r3, #1
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d3e2      	bcc.n	8004ed0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3724      	adds	r7, #36	@ 0x24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b08b      	sub	sp, #44	@ 0x2c
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f2e:	88fb      	ldrh	r3, [r7, #6]
 8004f30:	089b      	lsrs	r3, r3, #2
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	f003 0303 	and.w	r3, r3, #3
 8004f3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f3e:	2300      	movs	r3, #0
 8004f40:	623b      	str	r3, [r7, #32]
 8004f42:	e014      	b.n	8004f6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	3301      	adds	r3, #1
 8004f54:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	3301      	adds	r3, #1
 8004f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5e:	3301      	adds	r3, #1
 8004f60:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	3301      	adds	r3, #1
 8004f66:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	623b      	str	r3, [r7, #32]
 8004f6e:	6a3a      	ldr	r2, [r7, #32]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d3e6      	bcc.n	8004f44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f76:	8bfb      	ldrh	r3, [r7, #30]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01e      	beq.n	8004fba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f86:	461a      	mov	r2, r3
 8004f88:	f107 0310 	add.w	r3, r7, #16
 8004f8c:	6812      	ldr	r2, [r2, #0]
 8004f8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa0:	701a      	strb	r2, [r3, #0]
      i++;
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	623b      	str	r3, [r7, #32]
      pDest++;
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004faa:	3301      	adds	r3, #1
 8004fac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004fae:	8bfb      	ldrh	r3, [r7, #30]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004fb4:	8bfb      	ldrh	r3, [r7, #30]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1ea      	bne.n	8004f90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	372c      	adds	r7, #44	@ 0x2c
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	785b      	ldrb	r3, [r3, #1]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d12c      	bne.n	800503e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	db12      	blt.n	800501c <USB_EPSetStall+0x54>
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00f      	beq.n	800501c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	0151      	lsls	r1, r2, #5
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	440a      	add	r2, r1
 8005012:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005016:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800501a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	0151      	lsls	r1, r2, #5
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	440a      	add	r2, r1
 8005032:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005036:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	e02b      	b.n	8005096 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	db12      	blt.n	8005076 <USB_EPSetStall+0xae>
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00f      	beq.n	8005076 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	0151      	lsls	r1, r2, #5
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	440a      	add	r2, r1
 800506c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005070:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005074:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	0151      	lsls	r1, r2, #5
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	440a      	add	r2, r1
 800508c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005090:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005094:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d128      	bne.n	8005112 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	0151      	lsls	r1, r2, #5
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	440a      	add	r2, r1
 80050d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	791b      	ldrb	r3, [r3, #4]
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d003      	beq.n	80050f0 <USB_EPClearStall+0x4c>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	791b      	ldrb	r3, [r3, #4]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d138      	bne.n	8005162 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	0151      	lsls	r1, r2, #5
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	440a      	add	r2, r1
 8005106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800510a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	e027      	b.n	8005162 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	0151      	lsls	r1, r2, #5
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	440a      	add	r2, r1
 8005128:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800512c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005130:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	791b      	ldrb	r3, [r3, #4]
 8005136:	2b03      	cmp	r3, #3
 8005138:	d003      	beq.n	8005142 <USB_EPClearStall+0x9e>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	791b      	ldrb	r3, [r3, #4]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d10f      	bne.n	8005162 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	0151      	lsls	r1, r2, #5
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	440a      	add	r2, r1
 8005158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800515c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005160:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800518e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005192:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80051a4:	68f9      	ldr	r1, [r7, #12]
 80051a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051aa:	4313      	orrs	r3, r2
 80051ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80051d6:	f023 0303 	bic.w	r3, r3, #3
 80051da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051ea:	f023 0302 	bic.w	r3, r3, #2
 80051ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80051fe:	b480      	push	{r7}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005218:	f023 0303 	bic.w	r3, r3, #3
 800521c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800522c:	f043 0302 	orr.w	r3, r3, #2
 8005230:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4013      	ands	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005258:	68fb      	ldr	r3, [r7, #12]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	4013      	ands	r3, r2
 8005288:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	0c1b      	lsrs	r3, r3, #16
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	4013      	ands	r3, r2
 80052bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	b29b      	uxth	r3, r3
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b085      	sub	sp, #20
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	460b      	mov	r3, r1
 80052d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80052de:	78fb      	ldrb	r3, [r7, #3]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	4013      	ands	r3, r2
 80052fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052fc:	68bb      	ldr	r3, [r7, #8]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800530a:	b480      	push	{r7}
 800530c:	b087      	sub	sp, #28
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	460b      	mov	r3, r1
 8005314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800532a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800532c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800532e:	78fb      	ldrb	r3, [r7, #3]
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	fa22 f303 	lsr.w	r3, r2, r3
 800533a:	01db      	lsls	r3, r3, #7
 800533c:	b2db      	uxtb	r3, r3
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4013      	ands	r3, r2
 8005356:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005358:	68bb      	ldr	r3, [r7, #8]
}
 800535a:	4618      	mov	r0, r3
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	f003 0301 	and.w	r3, r3, #1
}
 8005376:	4618      	mov	r0, r3
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800539c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80053a0:	f023 0307 	bic.w	r3, r3, #7
 80053a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	460b      	mov	r3, r1
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	333c      	adds	r3, #60	@ 0x3c
 80053de:	3304      	adds	r3, #4
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	4a26      	ldr	r2, [pc, #152]	@ (8005480 <USB_EP0_OutStart+0xb8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d90a      	bls.n	8005402 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053fc:	d101      	bne.n	8005402 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	e037      	b.n	8005472 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005408:	461a      	mov	r2, r3
 800540a:	2300      	movs	r3, #0
 800540c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800541c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005420:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005430:	f043 0318 	orr.w	r3, r3, #24
 8005434:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005444:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005448:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800544a:	7afb      	ldrb	r3, [r7, #11]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d10f      	bne.n	8005470 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005456:	461a      	mov	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800546a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800546e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	4f54300a 	.word	0x4f54300a

08005484 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3301      	adds	r3, #1
 8005494:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800549c:	d901      	bls.n	80054a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e01b      	b.n	80054da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	daf2      	bge.n	8005490 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f043 0201 	orr.w	r2, r3, #1
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3301      	adds	r3, #1
 80054be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054c6:	d901      	bls.n	80054cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e006      	b.n	80054da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d0f0      	beq.n	80054ba <USB_CoreReset+0x36>

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80054f4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80054f8:	f002 fce4 	bl	8007ec4 <USBD_static_malloc>
 80054fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d109      	bne.n	8005518 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	32b0      	adds	r2, #176	@ 0xb0
 800550e:	2100      	movs	r1, #0
 8005510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005514:	2302      	movs	r3, #2
 8005516:	e0d4      	b.n	80056c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005518:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800551c:	2100      	movs	r1, #0
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f002 fd14 	bl	8007f4c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	32b0      	adds	r2, #176	@ 0xb0
 800552e:	68f9      	ldr	r1, [r7, #12]
 8005530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	32b0      	adds	r2, #176	@ 0xb0
 800553e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	7c1b      	ldrb	r3, [r3, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d138      	bne.n	80055c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005550:	4b5e      	ldr	r3, [pc, #376]	@ (80056cc <USBD_CDC_Init+0x1e4>)
 8005552:	7819      	ldrb	r1, [r3, #0]
 8005554:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005558:	2202      	movs	r2, #2
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f002 fb41 	bl	8007be2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005560:	4b5a      	ldr	r3, [pc, #360]	@ (80056cc <USBD_CDC_Init+0x1e4>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	f003 020f 	and.w	r2, r3, #15
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	3324      	adds	r3, #36	@ 0x24
 8005576:	2201      	movs	r2, #1
 8005578:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800557a:	4b55      	ldr	r3, [pc, #340]	@ (80056d0 <USBD_CDC_Init+0x1e8>)
 800557c:	7819      	ldrb	r1, [r3, #0]
 800557e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005582:	2202      	movs	r2, #2
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f002 fb2c 	bl	8007be2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800558a:	4b51      	ldr	r3, [pc, #324]	@ (80056d0 <USBD_CDC_Init+0x1e8>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	f003 020f 	and.w	r2, r3, #15
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	440b      	add	r3, r1
 800559e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80055a2:	2201      	movs	r2, #1
 80055a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80055a6:	4b4b      	ldr	r3, [pc, #300]	@ (80056d4 <USBD_CDC_Init+0x1ec>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	f003 020f 	and.w	r2, r3, #15
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	3326      	adds	r3, #38	@ 0x26
 80055bc:	2210      	movs	r2, #16
 80055be:	801a      	strh	r2, [r3, #0]
 80055c0:	e035      	b.n	800562e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80055c2:	4b42      	ldr	r3, [pc, #264]	@ (80056cc <USBD_CDC_Init+0x1e4>)
 80055c4:	7819      	ldrb	r1, [r3, #0]
 80055c6:	2340      	movs	r3, #64	@ 0x40
 80055c8:	2202      	movs	r2, #2
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f002 fb09 	bl	8007be2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80055d0:	4b3e      	ldr	r3, [pc, #248]	@ (80056cc <USBD_CDC_Init+0x1e4>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	f003 020f 	and.w	r2, r3, #15
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	4613      	mov	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	3324      	adds	r3, #36	@ 0x24
 80055e6:	2201      	movs	r2, #1
 80055e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80055ea:	4b39      	ldr	r3, [pc, #228]	@ (80056d0 <USBD_CDC_Init+0x1e8>)
 80055ec:	7819      	ldrb	r1, [r3, #0]
 80055ee:	2340      	movs	r3, #64	@ 0x40
 80055f0:	2202      	movs	r2, #2
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f002 faf5 	bl	8007be2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80055f8:	4b35      	ldr	r3, [pc, #212]	@ (80056d0 <USBD_CDC_Init+0x1e8>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	f003 020f 	and.w	r2, r3, #15
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	440b      	add	r3, r1
 800560c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005610:	2201      	movs	r2, #1
 8005612:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005614:	4b2f      	ldr	r3, [pc, #188]	@ (80056d4 <USBD_CDC_Init+0x1ec>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	f003 020f 	and.w	r2, r3, #15
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	4613      	mov	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	440b      	add	r3, r1
 8005628:	3326      	adds	r3, #38	@ 0x26
 800562a:	2210      	movs	r2, #16
 800562c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800562e:	4b29      	ldr	r3, [pc, #164]	@ (80056d4 <USBD_CDC_Init+0x1ec>)
 8005630:	7819      	ldrb	r1, [r3, #0]
 8005632:	2308      	movs	r3, #8
 8005634:	2203      	movs	r2, #3
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f002 fad3 	bl	8007be2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800563c:	4b25      	ldr	r3, [pc, #148]	@ (80056d4 <USBD_CDC_Init+0x1ec>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	f003 020f 	and.w	r2, r3, #15
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	4613      	mov	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	440b      	add	r3, r1
 8005650:	3324      	adds	r3, #36	@ 0x24
 8005652:	2201      	movs	r2, #1
 8005654:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	33b0      	adds	r3, #176	@ 0xb0
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800568c:	2302      	movs	r3, #2
 800568e:	e018      	b.n	80056c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	7c1b      	ldrb	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005698:	4b0d      	ldr	r3, [pc, #52]	@ (80056d0 <USBD_CDC_Init+0x1e8>)
 800569a:	7819      	ldrb	r1, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80056a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f002 fb8a 	bl	8007dc0 <USBD_LL_PrepareReceive>
 80056ac:	e008      	b.n	80056c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056ae:	4b08      	ldr	r3, [pc, #32]	@ (80056d0 <USBD_CDC_Init+0x1e8>)
 80056b0:	7819      	ldrb	r1, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80056b8:	2340      	movs	r3, #64	@ 0x40
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f002 fb80 	bl	8007dc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20017797 	.word	0x20017797
 80056d0:	20017798 	.word	0x20017798
 80056d4:	20017799 	.word	0x20017799

080056d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80056e4:	4b3a      	ldr	r3, [pc, #232]	@ (80057d0 <USBD_CDC_DeInit+0xf8>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f002 fa9f 	bl	8007c2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80056f0:	4b37      	ldr	r3, [pc, #220]	@ (80057d0 <USBD_CDC_DeInit+0xf8>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	f003 020f 	and.w	r2, r3, #15
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	3324      	adds	r3, #36	@ 0x24
 8005706:	2200      	movs	r2, #0
 8005708:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800570a:	4b32      	ldr	r3, [pc, #200]	@ (80057d4 <USBD_CDC_DeInit+0xfc>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f002 fa8c 	bl	8007c2e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005716:	4b2f      	ldr	r3, [pc, #188]	@ (80057d4 <USBD_CDC_DeInit+0xfc>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	f003 020f 	and.w	r2, r3, #15
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	440b      	add	r3, r1
 800572a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800572e:	2200      	movs	r2, #0
 8005730:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005732:	4b29      	ldr	r3, [pc, #164]	@ (80057d8 <USBD_CDC_DeInit+0x100>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	4619      	mov	r1, r3
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f002 fa78 	bl	8007c2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800573e:	4b26      	ldr	r3, [pc, #152]	@ (80057d8 <USBD_CDC_DeInit+0x100>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	f003 020f 	and.w	r2, r3, #15
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	3324      	adds	r3, #36	@ 0x24
 8005754:	2200      	movs	r2, #0
 8005756:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005758:	4b1f      	ldr	r3, [pc, #124]	@ (80057d8 <USBD_CDC_DeInit+0x100>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	f003 020f 	and.w	r2, r3, #15
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	3326      	adds	r3, #38	@ 0x26
 800576e:	2200      	movs	r2, #0
 8005770:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	32b0      	adds	r2, #176	@ 0xb0
 800577c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01f      	beq.n	80057c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	33b0      	adds	r3, #176	@ 0xb0
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	32b0      	adds	r2, #176	@ 0xb0
 80057a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f002 fb9a 	bl	8007ee0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	32b0      	adds	r2, #176	@ 0xb0
 80057b6:	2100      	movs	r1, #0
 80057b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20017797 	.word	0x20017797
 80057d4:	20017798 	.word	0x20017798
 80057d8:	20017799 	.word	0x20017799

080057dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	32b0      	adds	r2, #176	@ 0xb0
 80057f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005808:	2303      	movs	r3, #3
 800580a:	e0bf      	b.n	800598c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005814:	2b00      	cmp	r3, #0
 8005816:	d050      	beq.n	80058ba <USBD_CDC_Setup+0xde>
 8005818:	2b20      	cmp	r3, #32
 800581a:	f040 80af 	bne.w	800597c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	88db      	ldrh	r3, [r3, #6]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d03a      	beq.n	800589c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	b25b      	sxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	da1b      	bge.n	8005868 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	33b0      	adds	r3, #176	@ 0xb0
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005846:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	88d2      	ldrh	r2, [r2, #6]
 800584c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	88db      	ldrh	r3, [r3, #6]
 8005852:	2b07      	cmp	r3, #7
 8005854:	bf28      	it	cs
 8005856:	2307      	movcs	r3, #7
 8005858:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	89fa      	ldrh	r2, [r7, #14]
 800585e:	4619      	mov	r1, r3
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f001 fd7d 	bl	8007360 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005866:	e090      	b.n	800598a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	785a      	ldrb	r2, [r3, #1]
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	88db      	ldrh	r3, [r3, #6]
 8005876:	2b3f      	cmp	r3, #63	@ 0x3f
 8005878:	d803      	bhi.n	8005882 <USBD_CDC_Setup+0xa6>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	88db      	ldrh	r3, [r3, #6]
 800587e:	b2da      	uxtb	r2, r3
 8005880:	e000      	b.n	8005884 <USBD_CDC_Setup+0xa8>
 8005882:	2240      	movs	r2, #64	@ 0x40
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800588a:	6939      	ldr	r1, [r7, #16]
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005892:	461a      	mov	r2, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 fd8f 	bl	80073b8 <USBD_CtlPrepareRx>
      break;
 800589a:	e076      	b.n	800598a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	33b0      	adds	r3, #176	@ 0xb0
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	7850      	ldrb	r0, [r2, #1]
 80058b2:	2200      	movs	r2, #0
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	4798      	blx	r3
      break;
 80058b8:	e067      	b.n	800598a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	785b      	ldrb	r3, [r3, #1]
 80058be:	2b0b      	cmp	r3, #11
 80058c0:	d851      	bhi.n	8005966 <USBD_CDC_Setup+0x18a>
 80058c2:	a201      	add	r2, pc, #4	@ (adr r2, 80058c8 <USBD_CDC_Setup+0xec>)
 80058c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c8:	080058f9 	.word	0x080058f9
 80058cc:	08005975 	.word	0x08005975
 80058d0:	08005967 	.word	0x08005967
 80058d4:	08005967 	.word	0x08005967
 80058d8:	08005967 	.word	0x08005967
 80058dc:	08005967 	.word	0x08005967
 80058e0:	08005967 	.word	0x08005967
 80058e4:	08005967 	.word	0x08005967
 80058e8:	08005967 	.word	0x08005967
 80058ec:	08005967 	.word	0x08005967
 80058f0:	08005923 	.word	0x08005923
 80058f4:	0800594d 	.word	0x0800594d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b03      	cmp	r3, #3
 8005902:	d107      	bne.n	8005914 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005904:	f107 030a 	add.w	r3, r7, #10
 8005908:	2202      	movs	r2, #2
 800590a:	4619      	mov	r1, r3
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f001 fd27 	bl	8007360 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005912:	e032      	b.n	800597a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f001 fca5 	bl	8007266 <USBD_CtlError>
            ret = USBD_FAIL;
 800591c:	2303      	movs	r3, #3
 800591e:	75fb      	strb	r3, [r7, #23]
          break;
 8005920:	e02b      	b.n	800597a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b03      	cmp	r3, #3
 800592c:	d107      	bne.n	800593e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800592e:	f107 030d 	add.w	r3, r7, #13
 8005932:	2201      	movs	r2, #1
 8005934:	4619      	mov	r1, r3
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f001 fd12 	bl	8007360 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800593c:	e01d      	b.n	800597a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800593e:	6839      	ldr	r1, [r7, #0]
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f001 fc90 	bl	8007266 <USBD_CtlError>
            ret = USBD_FAIL;
 8005946:	2303      	movs	r3, #3
 8005948:	75fb      	strb	r3, [r7, #23]
          break;
 800594a:	e016      	b.n	800597a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b03      	cmp	r3, #3
 8005956:	d00f      	beq.n	8005978 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005958:	6839      	ldr	r1, [r7, #0]
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f001 fc83 	bl	8007266 <USBD_CtlError>
            ret = USBD_FAIL;
 8005960:	2303      	movs	r3, #3
 8005962:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005964:	e008      	b.n	8005978 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f001 fc7c 	bl	8007266 <USBD_CtlError>
          ret = USBD_FAIL;
 800596e:	2303      	movs	r3, #3
 8005970:	75fb      	strb	r3, [r7, #23]
          break;
 8005972:	e002      	b.n	800597a <USBD_CDC_Setup+0x19e>
          break;
 8005974:	bf00      	nop
 8005976:	e008      	b.n	800598a <USBD_CDC_Setup+0x1ae>
          break;
 8005978:	bf00      	nop
      }
      break;
 800597a:	e006      	b.n	800598a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 fc71 	bl	8007266 <USBD_CtlError>
      ret = USBD_FAIL;
 8005984:	2303      	movs	r3, #3
 8005986:	75fb      	strb	r3, [r7, #23]
      break;
 8005988:	bf00      	nop
  }

  return (uint8_t)ret;
 800598a:	7dfb      	ldrb	r3, [r7, #23]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80059a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	32b0      	adds	r2, #176	@ 0xb0
 80059b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e065      	b.n	8005a8a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	32b0      	adds	r2, #176	@ 0xb0
 80059c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80059ce:	78fb      	ldrb	r3, [r7, #3]
 80059d0:	f003 020f 	and.w	r2, r3, #15
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	440b      	add	r3, r1
 80059e0:	3318      	adds	r3, #24
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d02f      	beq.n	8005a48 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	f003 020f 	and.w	r2, r3, #15
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	3318      	adds	r3, #24
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	f003 010f 	and.w	r1, r3, #15
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	460b      	mov	r3, r1
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	440b      	add	r3, r1
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4403      	add	r3, r0
 8005a10:	331c      	adds	r3, #28
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a18:	fb01 f303 	mul.w	r3, r1, r3
 8005a1c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d112      	bne.n	8005a48 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005a22:	78fb      	ldrb	r3, [r7, #3]
 8005a24:	f003 020f 	and.w	r2, r3, #15
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	3318      	adds	r3, #24
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a3a:	78f9      	ldrb	r1, [r7, #3]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	2200      	movs	r2, #0
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f002 f99c 	bl	8007d7e <USBD_LL_Transmit>
 8005a46:	e01f      	b.n	8005a88 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	33b0      	adds	r3, #176	@ 0xb0
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d010      	beq.n	8005a88 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	33b0      	adds	r3, #176	@ 0xb0
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005a84:	78fa      	ldrb	r2, [r7, #3]
 8005a86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	32b0      	adds	r2, #176	@ 0xb0
 8005aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	32b0      	adds	r2, #176	@ 0xb0
 8005ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e01a      	b.n	8005afa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f002 f99a 	bl	8007e02 <USBD_LL_GetRxDataSize>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	33b0      	adds	r3, #176	@ 0xb0
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005af4:	4611      	mov	r1, r2
 8005af6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	32b0      	adds	r2, #176	@ 0xb0
 8005b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e024      	b.n	8005b6e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	33b0      	adds	r3, #176	@ 0xb0
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d019      	beq.n	8005b6c <USBD_CDC_EP0_RxReady+0x6a>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005b3e:	2bff      	cmp	r3, #255	@ 0xff
 8005b40:	d014      	beq.n	8005b6c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	33b0      	adds	r3, #176	@ 0xb0
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005b5a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b62:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	22ff      	movs	r2, #255	@ 0xff
 8005b68:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b80:	2182      	movs	r1, #130	@ 0x82
 8005b82:	4818      	ldr	r0, [pc, #96]	@ (8005be4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b84:	f000 fd0f 	bl	80065a6 <USBD_GetEpDesc>
 8005b88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	4815      	ldr	r0, [pc, #84]	@ (8005be4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b8e:	f000 fd0a 	bl	80065a6 <USBD_GetEpDesc>
 8005b92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b94:	2181      	movs	r1, #129	@ 0x81
 8005b96:	4813      	ldr	r0, [pc, #76]	@ (8005be4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005b98:	f000 fd05 	bl	80065a6 <USBD_GetEpDesc>
 8005b9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2210      	movs	r2, #16
 8005ba8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d006      	beq.n	8005bbe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bb8:	711a      	strb	r2, [r3, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d006      	beq.n	8005bd2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bcc:	711a      	strb	r2, [r3, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2243      	movs	r2, #67	@ 0x43
 8005bd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005bd8:	4b02      	ldr	r3, [pc, #8]	@ (8005be4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20017754 	.word	0x20017754

08005be8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005bf0:	2182      	movs	r1, #130	@ 0x82
 8005bf2:	4818      	ldr	r0, [pc, #96]	@ (8005c54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bf4:	f000 fcd7 	bl	80065a6 <USBD_GetEpDesc>
 8005bf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	4815      	ldr	r0, [pc, #84]	@ (8005c54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005bfe:	f000 fcd2 	bl	80065a6 <USBD_GetEpDesc>
 8005c02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c04:	2181      	movs	r1, #129	@ 0x81
 8005c06:	4813      	ldr	r0, [pc, #76]	@ (8005c54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c08:	f000 fccd 	bl	80065a6 <USBD_GetEpDesc>
 8005c0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2210      	movs	r2, #16
 8005c18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d006      	beq.n	8005c2e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2200      	movs	r2, #0
 8005c24:	711a      	strb	r2, [r3, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f042 0202 	orr.w	r2, r2, #2
 8005c2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d006      	beq.n	8005c42 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	711a      	strb	r2, [r3, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f042 0202 	orr.w	r2, r2, #2
 8005c40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2243      	movs	r2, #67	@ 0x43
 8005c46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c48:	4b02      	ldr	r3, [pc, #8]	@ (8005c54 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	20017754 	.word	0x20017754

08005c58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c60:	2182      	movs	r1, #130	@ 0x82
 8005c62:	4818      	ldr	r0, [pc, #96]	@ (8005cc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c64:	f000 fc9f 	bl	80065a6 <USBD_GetEpDesc>
 8005c68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	4815      	ldr	r0, [pc, #84]	@ (8005cc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c6e:	f000 fc9a 	bl	80065a6 <USBD_GetEpDesc>
 8005c72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c74:	2181      	movs	r1, #129	@ 0x81
 8005c76:	4813      	ldr	r0, [pc, #76]	@ (8005cc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c78:	f000 fc95 	bl	80065a6 <USBD_GetEpDesc>
 8005c7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2210      	movs	r2, #16
 8005c88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d006      	beq.n	8005c9e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c98:	711a      	strb	r2, [r3, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d006      	beq.n	8005cb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cac:	711a      	strb	r2, [r3, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2243      	movs	r2, #67	@ 0x43
 8005cb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005cb8:	4b02      	ldr	r3, [pc, #8]	@ (8005cc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20017754 	.word	0x20017754

08005cc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	220a      	movs	r2, #10
 8005cd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005cd6:	4b03      	ldr	r3, [pc, #12]	@ (8005ce4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	20017710 	.word	0x20017710

08005ce8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e009      	b.n	8005d10 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	33b0      	adds	r3, #176	@ 0xb0
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	32b0      	adds	r2, #176	@ 0xb0
 8005d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d36:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e008      	b.n	8005d54 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	32b0      	adds	r2, #176	@ 0xb0
 8005d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e004      	b.n	8005d8e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
	...

08005d9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	32b0      	adds	r2, #176	@ 0xb0
 8005dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	32b0      	adds	r2, #176	@ 0xb0
 8005dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e018      	b.n	8005dfc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	7c1b      	ldrb	r3, [r3, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10a      	bne.n	8005de8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005e04 <USBD_CDC_ReceivePacket+0x68>)
 8005dd4:	7819      	ldrb	r1, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ddc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f001 ffed 	bl	8007dc0 <USBD_LL_PrepareReceive>
 8005de6:	e008      	b.n	8005dfa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005de8:	4b06      	ldr	r3, [pc, #24]	@ (8005e04 <USBD_CDC_ReceivePacket+0x68>)
 8005dea:	7819      	ldrb	r1, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005df2:	2340      	movs	r3, #64	@ 0x40
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f001 ffe3 	bl	8007dc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20017798 	.word	0x20017798

08005e08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	4613      	mov	r3, r2
 8005e14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e01f      	b.n	8005e60 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	79fa      	ldrb	r2, [r7, #7]
 8005e52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f001 fe5d 	bl	8007b14 <USBD_LL_Init>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e025      	b.n	8005ecc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	32ae      	adds	r2, #174	@ 0xae
 8005e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00f      	beq.n	8005ebc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	32ae      	adds	r2, #174	@ 0xae
 8005ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eac:	f107 020e 	add.w	r2, r7, #14
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	4798      	blx	r3
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f001 fe65 	bl	8007bac <USBD_LL_Start>
 8005ee2:	4603      	mov	r3, r0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ef4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b084      	sub	sp, #16
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d009      	beq.n	8005f30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	78fa      	ldrb	r2, [r7, #3]
 8005f26:	4611      	mov	r1, r2
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	4798      	blx	r3
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	460b      	mov	r3, r1
 8005f44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	78fa      	ldrb	r2, [r7, #3]
 8005f54:	4611      	mov	r1, r2
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4798      	blx	r3
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005f60:	2303      	movs	r3, #3
 8005f62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f001 f936 	bl	80071f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005f94:	461a      	mov	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005fa2:	f003 031f 	and.w	r3, r3, #31
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d01a      	beq.n	8005fe0 <USBD_LL_SetupStage+0x72>
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d822      	bhi.n	8005ff4 <USBD_LL_SetupStage+0x86>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <USBD_LL_SetupStage+0x4a>
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d00a      	beq.n	8005fcc <USBD_LL_SetupStage+0x5e>
 8005fb6:	e01d      	b.n	8005ff4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fb63 	bl	800668c <USBD_StdDevReq>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8005fca:	e020      	b.n	800600e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fbcb 	bl	8006770 <USBD_StdItfReq>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8005fde:	e016      	b.n	800600e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fc2d 	bl	8006848 <USBD_StdEPReq>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff2:	e00c      	b.n	800600e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005ffa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f001 fe32 	bl	8007c6c <USBD_LL_StallEP>
 8006008:	4603      	mov	r3, r0
 800600a:	73fb      	strb	r3, [r7, #15]
      break;
 800600c:	bf00      	nop
  }

  return ret;
 800600e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	460b      	mov	r3, r1
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800602a:	7afb      	ldrb	r3, [r7, #11]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d16e      	bne.n	800610e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006036:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800603e:	2b03      	cmp	r3, #3
 8006040:	f040 8098 	bne.w	8006174 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	429a      	cmp	r2, r3
 800604e:	d913      	bls.n	8006078 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	1ad2      	subs	r2, r2, r3
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	4293      	cmp	r3, r2
 8006068:	bf28      	it	cs
 800606a:	4613      	movcs	r3, r2
 800606c:	461a      	mov	r2, r3
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f001 f9be 	bl	80073f2 <USBD_CtlContinueRx>
 8006076:	e07d      	b.n	8006174 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	2b02      	cmp	r3, #2
 8006084:	d014      	beq.n	80060b0 <USBD_LL_DataOutStage+0x98>
 8006086:	2b02      	cmp	r3, #2
 8006088:	d81d      	bhi.n	80060c6 <USBD_LL_DataOutStage+0xae>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <USBD_LL_DataOutStage+0x7c>
 800608e:	2b01      	cmp	r3, #1
 8006090:	d003      	beq.n	800609a <USBD_LL_DataOutStage+0x82>
 8006092:	e018      	b.n	80060c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	75bb      	strb	r3, [r7, #22]
            break;
 8006098:	e018      	b.n	80060cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	4619      	mov	r1, r3
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 fa64 	bl	8006572 <USBD_CoreFindIF>
 80060aa:	4603      	mov	r3, r0
 80060ac:	75bb      	strb	r3, [r7, #22]
            break;
 80060ae:	e00d      	b.n	80060cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	4619      	mov	r1, r3
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 fa66 	bl	800658c <USBD_CoreFindEP>
 80060c0:	4603      	mov	r3, r0
 80060c2:	75bb      	strb	r3, [r7, #22]
            break;
 80060c4:	e002      	b.n	80060cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	75bb      	strb	r3, [r7, #22]
            break;
 80060ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80060cc:	7dbb      	ldrb	r3, [r7, #22]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d119      	bne.n	8006106 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d113      	bne.n	8006106 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80060de:	7dba      	ldrb	r2, [r7, #22]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	32ae      	adds	r2, #174	@ 0xae
 80060e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80060ee:	7dba      	ldrb	r2, [r7, #22]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80060f6:	7dba      	ldrb	r2, [r7, #22]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	32ae      	adds	r2, #174	@ 0xae
 80060fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f001 f984 	bl	8007414 <USBD_CtlSendStatus>
 800610c:	e032      	b.n	8006174 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800610e:	7afb      	ldrb	r3, [r7, #11]
 8006110:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006114:	b2db      	uxtb	r3, r3
 8006116:	4619      	mov	r1, r3
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fa37 	bl	800658c <USBD_CoreFindEP>
 800611e:	4603      	mov	r3, r0
 8006120:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006122:	7dbb      	ldrb	r3, [r7, #22]
 8006124:	2bff      	cmp	r3, #255	@ 0xff
 8006126:	d025      	beq.n	8006174 <USBD_LL_DataOutStage+0x15c>
 8006128:	7dbb      	ldrb	r3, [r7, #22]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d122      	bne.n	8006174 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b03      	cmp	r3, #3
 8006138:	d117      	bne.n	800616a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800613a:	7dba      	ldrb	r2, [r7, #22]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	32ae      	adds	r2, #174	@ 0xae
 8006140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00f      	beq.n	800616a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800614a:	7dba      	ldrb	r2, [r7, #22]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006152:	7dba      	ldrb	r2, [r7, #22]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	32ae      	adds	r2, #174	@ 0xae
 8006158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	7afa      	ldrb	r2, [r7, #11]
 8006160:	4611      	mov	r1, r2
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	4798      	blx	r3
 8006166:	4603      	mov	r3, r0
 8006168:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800616a:	7dfb      	ldrb	r3, [r7, #23]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006170:	7dfb      	ldrb	r3, [r7, #23]
 8006172:	e000      	b.n	8006176 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b086      	sub	sp, #24
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	460b      	mov	r3, r1
 8006188:	607a      	str	r2, [r7, #4]
 800618a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800618c:	7afb      	ldrb	r3, [r7, #11]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d16f      	bne.n	8006272 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3314      	adds	r3, #20
 8006196:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d15a      	bne.n	8006258 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	689a      	ldr	r2, [r3, #8]
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d914      	bls.n	80061d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	1ad2      	subs	r2, r2, r3
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	461a      	mov	r2, r3
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f001 f8e6 	bl	8007396 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061ca:	2300      	movs	r3, #0
 80061cc:	2200      	movs	r2, #0
 80061ce:	2100      	movs	r1, #0
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f001 fdf5 	bl	8007dc0 <USBD_LL_PrepareReceive>
 80061d6:	e03f      	b.n	8006258 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d11c      	bne.n	800621e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d316      	bcc.n	800621e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d20f      	bcs.n	800621e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80061fe:	2200      	movs	r2, #0
 8006200:	2100      	movs	r1, #0
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f001 f8c7 	bl	8007396 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006210:	2300      	movs	r3, #0
 8006212:	2200      	movs	r2, #0
 8006214:	2100      	movs	r1, #0
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f001 fdd2 	bl	8007dc0 <USBD_LL_PrepareReceive>
 800621c:	e01c      	b.n	8006258 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b03      	cmp	r3, #3
 8006228:	d10f      	bne.n	800624a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d009      	beq.n	800624a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800624a:	2180      	movs	r1, #128	@ 0x80
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f001 fd0d 	bl	8007c6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f001 f8f1 	bl	800743a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d03a      	beq.n	80062d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7ff fe42 	bl	8005eec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006270:	e032      	b.n	80062d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006272:	7afb      	ldrb	r3, [r7, #11]
 8006274:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006278:	b2db      	uxtb	r3, r3
 800627a:	4619      	mov	r1, r3
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f985 	bl	800658c <USBD_CoreFindEP>
 8006282:	4603      	mov	r3, r0
 8006284:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006286:	7dfb      	ldrb	r3, [r7, #23]
 8006288:	2bff      	cmp	r3, #255	@ 0xff
 800628a:	d025      	beq.n	80062d8 <USBD_LL_DataInStage+0x15a>
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d122      	bne.n	80062d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b03      	cmp	r3, #3
 800629c:	d11c      	bne.n	80062d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800629e:	7dfa      	ldrb	r2, [r7, #23]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	32ae      	adds	r2, #174	@ 0xae
 80062a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d014      	beq.n	80062d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80062ae:	7dfa      	ldrb	r2, [r7, #23]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80062b6:	7dfa      	ldrb	r2, [r7, #23]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	32ae      	adds	r2, #174	@ 0xae
 80062bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	7afa      	ldrb	r2, [r7, #11]
 80062c4:	4611      	mov	r1, r2
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	4798      	blx	r3
 80062ca:	4603      	mov	r3, r0
 80062cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80062ce:	7dbb      	ldrb	r3, [r7, #22]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80062d4:	7dbb      	ldrb	r3, [r7, #22]
 80062d6:	e000      	b.n	80062da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d014      	beq.n	8006348 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00e      	beq.n	8006348 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6852      	ldr	r2, [r2, #4]
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	4611      	mov	r1, r2
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006344:	2303      	movs	r3, #3
 8006346:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006348:	2340      	movs	r3, #64	@ 0x40
 800634a:	2200      	movs	r2, #0
 800634c:	2100      	movs	r1, #0
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 fc47 	bl	8007be2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2240      	movs	r2, #64	@ 0x40
 8006360:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006364:	2340      	movs	r3, #64	@ 0x40
 8006366:	2200      	movs	r2, #0
 8006368:	2180      	movs	r1, #128	@ 0x80
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f001 fc39 	bl	8007be2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2240      	movs	r2, #64	@ 0x40
 800637a:	621a      	str	r2, [r3, #32]

  return ret;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	460b      	mov	r3, r1
 8006390:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	78fa      	ldrb	r2, [r7, #3]
 8006396:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b04      	cmp	r3, #4
 80063b8:	d006      	beq.n	80063c8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2204      	movs	r2, #4
 80063cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d106      	bne.n	8006400 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b082      	sub	sp, #8
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b03      	cmp	r3, #3
 8006420:	d110      	bne.n	8006444 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00b      	beq.n	8006444 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b082      	sub	sp, #8
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	460b      	mov	r3, r1
 8006458:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	32ae      	adds	r2, #174	@ 0xae
 8006464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800646c:	2303      	movs	r3, #3
 800646e:	e01c      	b.n	80064aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b03      	cmp	r3, #3
 800647a:	d115      	bne.n	80064a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	32ae      	adds	r2, #174	@ 0xae
 8006486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00b      	beq.n	80064a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	32ae      	adds	r2, #174	@ 0xae
 800649a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	78fa      	ldrb	r2, [r7, #3]
 80064a2:	4611      	mov	r1, r2
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	460b      	mov	r3, r1
 80064bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	32ae      	adds	r2, #174	@ 0xae
 80064c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e01c      	b.n	800650e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d115      	bne.n	800650c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	32ae      	adds	r2, #174	@ 0xae
 80064ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00b      	beq.n	800650c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	32ae      	adds	r2, #174	@ 0xae
 80064fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006504:	78fa      	ldrb	r2, [r7, #3]
 8006506:	4611      	mov	r1, r2
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006534:	2300      	movs	r3, #0
 8006536:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00e      	beq.n	8006568 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6852      	ldr	r2, [r2, #4]
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	4611      	mov	r1, r2
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	4798      	blx	r3
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006564:	2303      	movs	r3, #3
 8006566:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	460b      	mov	r3, r1
 800657c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800657e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006598:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800659a:	4618      	mov	r0, r3
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b086      	sub	sp, #24
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	460b      	mov	r3, r1
 80065b0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	885b      	ldrh	r3, [r3, #2]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	7812      	ldrb	r2, [r2, #0]
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d91f      	bls.n	800660c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80065d2:	e013      	b.n	80065fc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80065d4:	f107 030a 	add.w	r3, r7, #10
 80065d8:	4619      	mov	r1, r3
 80065da:	6978      	ldr	r0, [r7, #20]
 80065dc:	f000 f81b 	bl	8006616 <USBD_GetNextDesc>
 80065e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	785b      	ldrb	r3, [r3, #1]
 80065e6:	2b05      	cmp	r3, #5
 80065e8:	d108      	bne.n	80065fc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	789b      	ldrb	r3, [r3, #2]
 80065f2:	78fa      	ldrb	r2, [r7, #3]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d008      	beq.n	800660a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80065f8:	2300      	movs	r3, #0
 80065fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	885b      	ldrh	r3, [r3, #2]
 8006600:	b29a      	uxth	r2, r3
 8006602:	897b      	ldrh	r3, [r7, #10]
 8006604:	429a      	cmp	r2, r3
 8006606:	d8e5      	bhi.n	80065d4 <USBD_GetEpDesc+0x2e>
 8006608:	e000      	b.n	800660c <USBD_GetEpDesc+0x66>
          break;
 800660a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800660c:	693b      	ldr	r3, [r7, #16]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	7812      	ldrb	r2, [r2, #0]
 800662c:	4413      	add	r3, r2
 800662e:	b29a      	uxth	r2, r3
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	461a      	mov	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4413      	add	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006640:	68fb      	ldr	r3, [r7, #12]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800664e:	b480      	push	{r7}
 8006650:	b087      	sub	sp, #28
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	3301      	adds	r3, #1
 8006664:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800666c:	8a3b      	ldrh	r3, [r7, #16]
 800666e:	021b      	lsls	r3, r3, #8
 8006670:	b21a      	sxth	r2, r3
 8006672:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006676:	4313      	orrs	r3, r2
 8006678:	b21b      	sxth	r3, r3
 800667a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800667c:	89fb      	ldrh	r3, [r7, #14]
}
 800667e:	4618      	mov	r0, r3
 8006680:	371c      	adds	r7, #28
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
	...

0800668c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80066a2:	2b40      	cmp	r3, #64	@ 0x40
 80066a4:	d005      	beq.n	80066b2 <USBD_StdDevReq+0x26>
 80066a6:	2b40      	cmp	r3, #64	@ 0x40
 80066a8:	d857      	bhi.n	800675a <USBD_StdDevReq+0xce>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00f      	beq.n	80066ce <USBD_StdDevReq+0x42>
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	d153      	bne.n	800675a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	32ae      	adds	r2, #174	@ 0xae
 80066bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	4798      	blx	r3
 80066c8:	4603      	mov	r3, r0
 80066ca:	73fb      	strb	r3, [r7, #15]
      break;
 80066cc:	e04a      	b.n	8006764 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	785b      	ldrb	r3, [r3, #1]
 80066d2:	2b09      	cmp	r3, #9
 80066d4:	d83b      	bhi.n	800674e <USBD_StdDevReq+0xc2>
 80066d6:	a201      	add	r2, pc, #4	@ (adr r2, 80066dc <USBD_StdDevReq+0x50>)
 80066d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066dc:	08006731 	.word	0x08006731
 80066e0:	08006745 	.word	0x08006745
 80066e4:	0800674f 	.word	0x0800674f
 80066e8:	0800673b 	.word	0x0800673b
 80066ec:	0800674f 	.word	0x0800674f
 80066f0:	0800670f 	.word	0x0800670f
 80066f4:	08006705 	.word	0x08006705
 80066f8:	0800674f 	.word	0x0800674f
 80066fc:	08006727 	.word	0x08006727
 8006700:	08006719 	.word	0x08006719
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fa3c 	bl	8006b84 <USBD_GetDescriptor>
          break;
 800670c:	e024      	b.n	8006758 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fbcb 	bl	8006eac <USBD_SetAddress>
          break;
 8006716:	e01f      	b.n	8006758 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fc0a 	bl	8006f34 <USBD_SetConfig>
 8006720:	4603      	mov	r3, r0
 8006722:	73fb      	strb	r3, [r7, #15]
          break;
 8006724:	e018      	b.n	8006758 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fcad 	bl	8007088 <USBD_GetConfig>
          break;
 800672e:	e013      	b.n	8006758 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fcde 	bl	80070f4 <USBD_GetStatus>
          break;
 8006738:	e00e      	b.n	8006758 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fd0d 	bl	800715c <USBD_SetFeature>
          break;
 8006742:	e009      	b.n	8006758 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fd31 	bl	80071ae <USBD_ClrFeature>
          break;
 800674c:	e004      	b.n	8006758 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fd88 	bl	8007266 <USBD_CtlError>
          break;
 8006756:	bf00      	nop
      }
      break;
 8006758:	e004      	b.n	8006764 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fd82 	bl	8007266 <USBD_CtlError>
      break;
 8006762:	bf00      	nop
  }

  return ret;
 8006764:	7bfb      	ldrb	r3, [r7, #15]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop

08006770 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006786:	2b40      	cmp	r3, #64	@ 0x40
 8006788:	d005      	beq.n	8006796 <USBD_StdItfReq+0x26>
 800678a:	2b40      	cmp	r3, #64	@ 0x40
 800678c:	d852      	bhi.n	8006834 <USBD_StdItfReq+0xc4>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <USBD_StdItfReq+0x26>
 8006792:	2b20      	cmp	r3, #32
 8006794:	d14e      	bne.n	8006834 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800679c:	b2db      	uxtb	r3, r3
 800679e:	3b01      	subs	r3, #1
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d840      	bhi.n	8006826 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	889b      	ldrh	r3, [r3, #4]
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d836      	bhi.n	800681c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	889b      	ldrh	r3, [r3, #4]
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff fedb 	bl	8006572 <USBD_CoreFindIF>
 80067bc:	4603      	mov	r3, r0
 80067be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	2bff      	cmp	r3, #255	@ 0xff
 80067c4:	d01d      	beq.n	8006802 <USBD_StdItfReq+0x92>
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d11a      	bne.n	8006802 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80067cc:	7bba      	ldrb	r2, [r7, #14]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	32ae      	adds	r2, #174	@ 0xae
 80067d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00f      	beq.n	80067fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80067dc:	7bba      	ldrb	r2, [r7, #14]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067e4:	7bba      	ldrb	r2, [r7, #14]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	32ae      	adds	r2, #174	@ 0xae
 80067ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	4798      	blx	r3
 80067f6:	4603      	mov	r3, r0
 80067f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80067fa:	e004      	b.n	8006806 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80067fc:	2303      	movs	r3, #3
 80067fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006800:	e001      	b.n	8006806 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006802:	2303      	movs	r3, #3
 8006804:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	88db      	ldrh	r3, [r3, #6]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d110      	bne.n	8006830 <USBD_StdItfReq+0xc0>
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10d      	bne.n	8006830 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fdfd 	bl	8007414 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800681a:	e009      	b.n	8006830 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fd21 	bl	8007266 <USBD_CtlError>
          break;
 8006824:	e004      	b.n	8006830 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fd1c 	bl	8007266 <USBD_CtlError>
          break;
 800682e:	e000      	b.n	8006832 <USBD_StdItfReq+0xc2>
          break;
 8006830:	bf00      	nop
      }
      break;
 8006832:	e004      	b.n	800683e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fd15 	bl	8007266 <USBD_CtlError>
      break;
 800683c:	bf00      	nop
  }

  return ret;
 800683e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	889b      	ldrh	r3, [r3, #4]
 800685a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006864:	2b40      	cmp	r3, #64	@ 0x40
 8006866:	d007      	beq.n	8006878 <USBD_StdEPReq+0x30>
 8006868:	2b40      	cmp	r3, #64	@ 0x40
 800686a:	f200 817f 	bhi.w	8006b6c <USBD_StdEPReq+0x324>
 800686e:	2b00      	cmp	r3, #0
 8006870:	d02a      	beq.n	80068c8 <USBD_StdEPReq+0x80>
 8006872:	2b20      	cmp	r3, #32
 8006874:	f040 817a 	bne.w	8006b6c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006878:	7bbb      	ldrb	r3, [r7, #14]
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff fe85 	bl	800658c <USBD_CoreFindEP>
 8006882:	4603      	mov	r3, r0
 8006884:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006886:	7b7b      	ldrb	r3, [r7, #13]
 8006888:	2bff      	cmp	r3, #255	@ 0xff
 800688a:	f000 8174 	beq.w	8006b76 <USBD_StdEPReq+0x32e>
 800688e:	7b7b      	ldrb	r3, [r7, #13]
 8006890:	2b00      	cmp	r3, #0
 8006892:	f040 8170 	bne.w	8006b76 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006896:	7b7a      	ldrb	r2, [r7, #13]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800689e:	7b7a      	ldrb	r2, [r7, #13]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	32ae      	adds	r2, #174	@ 0xae
 80068a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 8163 	beq.w	8006b76 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80068b0:	7b7a      	ldrb	r2, [r7, #13]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	32ae      	adds	r2, #174	@ 0xae
 80068b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
 80068c2:	4603      	mov	r3, r0
 80068c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068c6:	e156      	b.n	8006b76 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	785b      	ldrb	r3, [r3, #1]
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d008      	beq.n	80068e2 <USBD_StdEPReq+0x9a>
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	f300 8145 	bgt.w	8006b60 <USBD_StdEPReq+0x318>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 809b 	beq.w	8006a12 <USBD_StdEPReq+0x1ca>
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d03c      	beq.n	800695a <USBD_StdEPReq+0x112>
 80068e0:	e13e      	b.n	8006b60 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d002      	beq.n	80068f4 <USBD_StdEPReq+0xac>
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d016      	beq.n	8006920 <USBD_StdEPReq+0xd8>
 80068f2:	e02c      	b.n	800694e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068f4:	7bbb      	ldrb	r3, [r7, #14]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00d      	beq.n	8006916 <USBD_StdEPReq+0xce>
 80068fa:	7bbb      	ldrb	r3, [r7, #14]
 80068fc:	2b80      	cmp	r3, #128	@ 0x80
 80068fe:	d00a      	beq.n	8006916 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006900:	7bbb      	ldrb	r3, [r7, #14]
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 f9b1 	bl	8007c6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800690a:	2180      	movs	r1, #128	@ 0x80
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f001 f9ad 	bl	8007c6c <USBD_LL_StallEP>
 8006912:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006914:	e020      	b.n	8006958 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fca4 	bl	8007266 <USBD_CtlError>
              break;
 800691e:	e01b      	b.n	8006958 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	885b      	ldrh	r3, [r3, #2]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10e      	bne.n	8006946 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00b      	beq.n	8006946 <USBD_StdEPReq+0xfe>
 800692e:	7bbb      	ldrb	r3, [r7, #14]
 8006930:	2b80      	cmp	r3, #128	@ 0x80
 8006932:	d008      	beq.n	8006946 <USBD_StdEPReq+0xfe>
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	88db      	ldrh	r3, [r3, #6]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800693c:	7bbb      	ldrb	r3, [r7, #14]
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f001 f993 	bl	8007c6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fd64 	bl	8007414 <USBD_CtlSendStatus>

              break;
 800694c:	e004      	b.n	8006958 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fc88 	bl	8007266 <USBD_CtlError>
              break;
 8006956:	bf00      	nop
          }
          break;
 8006958:	e107      	b.n	8006b6a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d002      	beq.n	800696c <USBD_StdEPReq+0x124>
 8006966:	2b03      	cmp	r3, #3
 8006968:	d016      	beq.n	8006998 <USBD_StdEPReq+0x150>
 800696a:	e04b      	b.n	8006a04 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800696c:	7bbb      	ldrb	r3, [r7, #14]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00d      	beq.n	800698e <USBD_StdEPReq+0x146>
 8006972:	7bbb      	ldrb	r3, [r7, #14]
 8006974:	2b80      	cmp	r3, #128	@ 0x80
 8006976:	d00a      	beq.n	800698e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 f975 	bl	8007c6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006982:	2180      	movs	r1, #128	@ 0x80
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 f971 	bl	8007c6c <USBD_LL_StallEP>
 800698a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800698c:	e040      	b.n	8006a10 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fc68 	bl	8007266 <USBD_CtlError>
              break;
 8006996:	e03b      	b.n	8006a10 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	885b      	ldrh	r3, [r3, #2]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d136      	bne.n	8006a0e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069a0:	7bbb      	ldrb	r3, [r7, #14]
 80069a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d004      	beq.n	80069b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069aa:	7bbb      	ldrb	r3, [r7, #14]
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f001 f97b 	bl	8007caa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fd2d 	bl	8007414 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7ff fde4 	bl	800658c <USBD_CoreFindEP>
 80069c4:	4603      	mov	r3, r0
 80069c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069c8:	7b7b      	ldrb	r3, [r7, #13]
 80069ca:	2bff      	cmp	r3, #255	@ 0xff
 80069cc:	d01f      	beq.n	8006a0e <USBD_StdEPReq+0x1c6>
 80069ce:	7b7b      	ldrb	r3, [r7, #13]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d11c      	bne.n	8006a0e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80069d4:	7b7a      	ldrb	r2, [r7, #13]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80069dc:	7b7a      	ldrb	r2, [r7, #13]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	32ae      	adds	r2, #174	@ 0xae
 80069e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d010      	beq.n	8006a0e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80069ec:	7b7a      	ldrb	r2, [r7, #13]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	32ae      	adds	r2, #174	@ 0xae
 80069f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	4798      	blx	r3
 80069fe:	4603      	mov	r3, r0
 8006a00:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006a02:	e004      	b.n	8006a0e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fc2d 	bl	8007266 <USBD_CtlError>
              break;
 8006a0c:	e000      	b.n	8006a10 <USBD_StdEPReq+0x1c8>
              break;
 8006a0e:	bf00      	nop
          }
          break;
 8006a10:	e0ab      	b.n	8006b6a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d002      	beq.n	8006a24 <USBD_StdEPReq+0x1dc>
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d032      	beq.n	8006a88 <USBD_StdEPReq+0x240>
 8006a22:	e097      	b.n	8006b54 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a24:	7bbb      	ldrb	r3, [r7, #14]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d007      	beq.n	8006a3a <USBD_StdEPReq+0x1f2>
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	2b80      	cmp	r3, #128	@ 0x80
 8006a2e:	d004      	beq.n	8006a3a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fc17 	bl	8007266 <USBD_CtlError>
                break;
 8006a38:	e091      	b.n	8006b5e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	da0b      	bge.n	8006a5a <USBD_StdEPReq+0x212>
 8006a42:	7bbb      	ldrb	r3, [r7, #14]
 8006a44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a48:	4613      	mov	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	3310      	adds	r3, #16
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	4413      	add	r3, r2
 8006a56:	3304      	adds	r3, #4
 8006a58:	e00b      	b.n	8006a72 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a5a:	7bbb      	ldrb	r3, [r7, #14]
 8006a5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	4413      	add	r3, r2
 8006a70:	3304      	adds	r3, #4
 8006a72:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fc6d 	bl	8007360 <USBD_CtlSendData>
              break;
 8006a86:	e06a      	b.n	8006b5e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	da11      	bge.n	8006ab4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	f003 020f 	and.w	r2, r3, #15
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	3324      	adds	r3, #36	@ 0x24
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d117      	bne.n	8006ada <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fbda 	bl	8007266 <USBD_CtlError>
                  break;
 8006ab2:	e054      	b.n	8006b5e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	f003 020f 	and.w	r2, r3, #15
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	440b      	add	r3, r1
 8006ac6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d104      	bne.n	8006ada <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fbc7 	bl	8007266 <USBD_CtlError>
                  break;
 8006ad8:	e041      	b.n	8006b5e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ada:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	da0b      	bge.n	8006afa <USBD_StdEPReq+0x2b2>
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ae8:	4613      	mov	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	3310      	adds	r3, #16
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	4413      	add	r3, r2
 8006af6:	3304      	adds	r3, #4
 8006af8:	e00b      	b.n	8006b12 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006afa:	7bbb      	ldrb	r3, [r7, #14]
 8006afc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	4413      	add	r3, r2
 8006b10:	3304      	adds	r3, #4
 8006b12:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b14:	7bbb      	ldrb	r3, [r7, #14]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <USBD_StdEPReq+0x2d8>
 8006b1a:	7bbb      	ldrb	r3, [r7, #14]
 8006b1c:	2b80      	cmp	r3, #128	@ 0x80
 8006b1e:	d103      	bne.n	8006b28 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	e00e      	b.n	8006b46 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b28:	7bbb      	ldrb	r3, [r7, #14]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 f8db 	bl	8007ce8 <USBD_LL_IsStallEP>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d003      	beq.n	8006b40 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	e002      	b.n	8006b46 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2202      	movs	r2, #2
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fc07 	bl	8007360 <USBD_CtlSendData>
              break;
 8006b52:	e004      	b.n	8006b5e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fb85 	bl	8007266 <USBD_CtlError>
              break;
 8006b5c:	bf00      	nop
          }
          break;
 8006b5e:	e004      	b.n	8006b6a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fb7f 	bl	8007266 <USBD_CtlError>
          break;
 8006b68:	bf00      	nop
      }
      break;
 8006b6a:	e005      	b.n	8006b78 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fb79 	bl	8007266 <USBD_CtlError>
      break;
 8006b74:	e000      	b.n	8006b78 <USBD_StdEPReq+0x330>
      break;
 8006b76:	bf00      	nop
  }

  return ret;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
	...

08006b84 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	885b      	ldrh	r3, [r3, #2]
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	2b0e      	cmp	r3, #14
 8006ba6:	f200 8152 	bhi.w	8006e4e <USBD_GetDescriptor+0x2ca>
 8006baa:	a201      	add	r2, pc, #4	@ (adr r2, 8006bb0 <USBD_GetDescriptor+0x2c>)
 8006bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb0:	08006c21 	.word	0x08006c21
 8006bb4:	08006c39 	.word	0x08006c39
 8006bb8:	08006c79 	.word	0x08006c79
 8006bbc:	08006e4f 	.word	0x08006e4f
 8006bc0:	08006e4f 	.word	0x08006e4f
 8006bc4:	08006def 	.word	0x08006def
 8006bc8:	08006e1b 	.word	0x08006e1b
 8006bcc:	08006e4f 	.word	0x08006e4f
 8006bd0:	08006e4f 	.word	0x08006e4f
 8006bd4:	08006e4f 	.word	0x08006e4f
 8006bd8:	08006e4f 	.word	0x08006e4f
 8006bdc:	08006e4f 	.word	0x08006e4f
 8006be0:	08006e4f 	.word	0x08006e4f
 8006be4:	08006e4f 	.word	0x08006e4f
 8006be8:	08006bed 	.word	0x08006bed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00b      	beq.n	8006c10 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	7c12      	ldrb	r2, [r2, #16]
 8006c04:	f107 0108 	add.w	r1, r7, #8
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4798      	blx	r3
 8006c0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c0e:	e126      	b.n	8006e5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fb27 	bl	8007266 <USBD_CtlError>
        err++;
 8006c18:	7afb      	ldrb	r3, [r7, #11]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	72fb      	strb	r3, [r7, #11]
      break;
 8006c1e:	e11e      	b.n	8006e5e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	7c12      	ldrb	r2, [r2, #16]
 8006c2c:	f107 0108 	add.w	r1, r7, #8
 8006c30:	4610      	mov	r0, r2
 8006c32:	4798      	blx	r3
 8006c34:	60f8      	str	r0, [r7, #12]
      break;
 8006c36:	e112      	b.n	8006e5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	7c1b      	ldrb	r3, [r3, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10d      	bne.n	8006c5c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c48:	f107 0208 	add.w	r2, r7, #8
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4798      	blx	r3
 8006c50:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3301      	adds	r3, #1
 8006c56:	2202      	movs	r2, #2
 8006c58:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c5a:	e100      	b.n	8006e5e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c64:	f107 0208 	add.w	r2, r7, #8
 8006c68:	4610      	mov	r0, r2
 8006c6a:	4798      	blx	r3
 8006c6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3301      	adds	r3, #1
 8006c72:	2202      	movs	r2, #2
 8006c74:	701a      	strb	r2, [r3, #0]
      break;
 8006c76:	e0f2      	b.n	8006e5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	885b      	ldrh	r3, [r3, #2]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b05      	cmp	r3, #5
 8006c80:	f200 80ac 	bhi.w	8006ddc <USBD_GetDescriptor+0x258>
 8006c84:	a201      	add	r2, pc, #4	@ (adr r2, 8006c8c <USBD_GetDescriptor+0x108>)
 8006c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8a:	bf00      	nop
 8006c8c:	08006ca5 	.word	0x08006ca5
 8006c90:	08006cd9 	.word	0x08006cd9
 8006c94:	08006d0d 	.word	0x08006d0d
 8006c98:	08006d41 	.word	0x08006d41
 8006c9c:	08006d75 	.word	0x08006d75
 8006ca0:	08006da9 	.word	0x08006da9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00b      	beq.n	8006cc8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	7c12      	ldrb	r2, [r2, #16]
 8006cbc:	f107 0108 	add.w	r1, r7, #8
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	4798      	blx	r3
 8006cc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cc6:	e091      	b.n	8006dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 facb 	bl	8007266 <USBD_CtlError>
            err++;
 8006cd0:	7afb      	ldrb	r3, [r7, #11]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	72fb      	strb	r3, [r7, #11]
          break;
 8006cd6:	e089      	b.n	8006dec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00b      	beq.n	8006cfc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	7c12      	ldrb	r2, [r2, #16]
 8006cf0:	f107 0108 	add.w	r1, r7, #8
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	4798      	blx	r3
 8006cf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cfa:	e077      	b.n	8006dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fab1 	bl	8007266 <USBD_CtlError>
            err++;
 8006d04:	7afb      	ldrb	r3, [r7, #11]
 8006d06:	3301      	adds	r3, #1
 8006d08:	72fb      	strb	r3, [r7, #11]
          break;
 8006d0a:	e06f      	b.n	8006dec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	7c12      	ldrb	r2, [r2, #16]
 8006d24:	f107 0108 	add.w	r1, r7, #8
 8006d28:	4610      	mov	r0, r2
 8006d2a:	4798      	blx	r3
 8006d2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d2e:	e05d      	b.n	8006dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fa97 	bl	8007266 <USBD_CtlError>
            err++;
 8006d38:	7afb      	ldrb	r3, [r7, #11]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d3e:	e055      	b.n	8006dec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00b      	beq.n	8006d64 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	7c12      	ldrb	r2, [r2, #16]
 8006d58:	f107 0108 	add.w	r1, r7, #8
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	4798      	blx	r3
 8006d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d62:	e043      	b.n	8006dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fa7d 	bl	8007266 <USBD_CtlError>
            err++;
 8006d6c:	7afb      	ldrb	r3, [r7, #11]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	72fb      	strb	r3, [r7, #11]
          break;
 8006d72:	e03b      	b.n	8006dec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00b      	beq.n	8006d98 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	7c12      	ldrb	r2, [r2, #16]
 8006d8c:	f107 0108 	add.w	r1, r7, #8
 8006d90:	4610      	mov	r0, r2
 8006d92:	4798      	blx	r3
 8006d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d96:	e029      	b.n	8006dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fa63 	bl	8007266 <USBD_CtlError>
            err++;
 8006da0:	7afb      	ldrb	r3, [r7, #11]
 8006da2:	3301      	adds	r3, #1
 8006da4:	72fb      	strb	r3, [r7, #11]
          break;
 8006da6:	e021      	b.n	8006dec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00b      	beq.n	8006dcc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	7c12      	ldrb	r2, [r2, #16]
 8006dc0:	f107 0108 	add.w	r1, r7, #8
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	4798      	blx	r3
 8006dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dca:	e00f      	b.n	8006dec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fa49 	bl	8007266 <USBD_CtlError>
            err++;
 8006dd4:	7afb      	ldrb	r3, [r7, #11]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dda:	e007      	b.n	8006dec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fa41 	bl	8007266 <USBD_CtlError>
          err++;
 8006de4:	7afb      	ldrb	r3, [r7, #11]
 8006de6:	3301      	adds	r3, #1
 8006de8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006dea:	bf00      	nop
      }
      break;
 8006dec:	e037      	b.n	8006e5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	7c1b      	ldrb	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d109      	bne.n	8006e0a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dfe:	f107 0208 	add.w	r2, r7, #8
 8006e02:	4610      	mov	r0, r2
 8006e04:	4798      	blx	r3
 8006e06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e08:	e029      	b.n	8006e5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fa2a 	bl	8007266 <USBD_CtlError>
        err++;
 8006e12:	7afb      	ldrb	r3, [r7, #11]
 8006e14:	3301      	adds	r3, #1
 8006e16:	72fb      	strb	r3, [r7, #11]
      break;
 8006e18:	e021      	b.n	8006e5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	7c1b      	ldrb	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10d      	bne.n	8006e3e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e2a:	f107 0208 	add.w	r2, r7, #8
 8006e2e:	4610      	mov	r0, r2
 8006e30:	4798      	blx	r3
 8006e32:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	3301      	adds	r3, #1
 8006e38:	2207      	movs	r2, #7
 8006e3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e3c:	e00f      	b.n	8006e5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fa10 	bl	8007266 <USBD_CtlError>
        err++;
 8006e46:	7afb      	ldrb	r3, [r7, #11]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e4c:	e007      	b.n	8006e5e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fa08 	bl	8007266 <USBD_CtlError>
      err++;
 8006e56:	7afb      	ldrb	r3, [r7, #11]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e5c:	bf00      	nop
  }

  if (err != 0U)
 8006e5e:	7afb      	ldrb	r3, [r7, #11]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d11e      	bne.n	8006ea2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	88db      	ldrh	r3, [r3, #6]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d016      	beq.n	8006e9a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006e6c:	893b      	ldrh	r3, [r7, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00e      	beq.n	8006e90 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	88da      	ldrh	r2, [r3, #6]
 8006e76:	893b      	ldrh	r3, [r7, #8]
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	bf28      	it	cs
 8006e7c:	4613      	movcs	r3, r2
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e82:	893b      	ldrh	r3, [r7, #8]
 8006e84:	461a      	mov	r2, r3
 8006e86:	68f9      	ldr	r1, [r7, #12]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fa69 	bl	8007360 <USBD_CtlSendData>
 8006e8e:	e009      	b.n	8006ea4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f9e7 	bl	8007266 <USBD_CtlError>
 8006e98:	e004      	b.n	8006ea4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 faba 	bl	8007414 <USBD_CtlSendStatus>
 8006ea0:	e000      	b.n	8006ea4 <USBD_GetDescriptor+0x320>
    return;
 8006ea2:	bf00      	nop
  }
}
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop

08006eac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	889b      	ldrh	r3, [r3, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d131      	bne.n	8006f22 <USBD_SetAddress+0x76>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	88db      	ldrh	r3, [r3, #6]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d12d      	bne.n	8006f22 <USBD_SetAddress+0x76>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	885b      	ldrh	r3, [r3, #2]
 8006eca:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ecc:	d829      	bhi.n	8006f22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	885b      	ldrh	r3, [r3, #2]
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ed8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d104      	bne.n	8006ef0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f9bc 	bl	8007266 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eee:	e01d      	b.n	8006f2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	7bfa      	ldrb	r2, [r7, #15]
 8006ef4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 ff1f 	bl	8007d40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fa86 	bl	8007414 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d004      	beq.n	8006f18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2202      	movs	r2, #2
 8006f12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f16:	e009      	b.n	8006f2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f20:	e004      	b.n	8006f2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f99e 	bl	8007266 <USBD_CtlError>
  }
}
 8006f2a:	bf00      	nop
 8006f2c:	bf00      	nop
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	885b      	ldrh	r3, [r3, #2]
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	4b4e      	ldr	r3, [pc, #312]	@ (8007084 <USBD_SetConfig+0x150>)
 8006f4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f4c:	4b4d      	ldr	r3, [pc, #308]	@ (8007084 <USBD_SetConfig+0x150>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d905      	bls.n	8006f60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f985 	bl	8007266 <USBD_CtlError>
    return USBD_FAIL;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e08c      	b.n	800707a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d002      	beq.n	8006f72 <USBD_SetConfig+0x3e>
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d029      	beq.n	8006fc4 <USBD_SetConfig+0x90>
 8006f70:	e075      	b.n	800705e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f72:	4b44      	ldr	r3, [pc, #272]	@ (8007084 <USBD_SetConfig+0x150>)
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d020      	beq.n	8006fbc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006f7a:	4b42      	ldr	r3, [pc, #264]	@ (8007084 <USBD_SetConfig+0x150>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f84:	4b3f      	ldr	r3, [pc, #252]	@ (8007084 <USBD_SetConfig+0x150>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7fe ffb9 	bl	8005f02 <USBD_SetClassConfig>
 8006f90:	4603      	mov	r3, r0
 8006f92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d008      	beq.n	8006fac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f962 	bl	8007266 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006faa:	e065      	b.n	8007078 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fa31 	bl	8007414 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2203      	movs	r2, #3
 8006fb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006fba:	e05d      	b.n	8007078 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fa29 	bl	8007414 <USBD_CtlSendStatus>
      break;
 8006fc2:	e059      	b.n	8007078 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8007084 <USBD_SetConfig+0x150>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d112      	bne.n	8006ff2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8007084 <USBD_SetConfig+0x150>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006fde:	4b29      	ldr	r3, [pc, #164]	@ (8007084 <USBD_SetConfig+0x150>)
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7fe ffa8 	bl	8005f3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fa12 	bl	8007414 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ff0:	e042      	b.n	8007078 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006ff2:	4b24      	ldr	r3, [pc, #144]	@ (8007084 <USBD_SetConfig+0x150>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d02a      	beq.n	8007056 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7fe ff96 	bl	8005f3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800700e:	4b1d      	ldr	r3, [pc, #116]	@ (8007084 <USBD_SetConfig+0x150>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007018:	4b1a      	ldr	r3, [pc, #104]	@ (8007084 <USBD_SetConfig+0x150>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7fe ff6f 	bl	8005f02 <USBD_SetClassConfig>
 8007024:	4603      	mov	r3, r0
 8007026:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00f      	beq.n	800704e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f918 	bl	8007266 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7fe ff7b 	bl	8005f3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800704c:	e014      	b.n	8007078 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f9e0 	bl	8007414 <USBD_CtlSendStatus>
      break;
 8007054:	e010      	b.n	8007078 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f9dc 	bl	8007414 <USBD_CtlSendStatus>
      break;
 800705c:	e00c      	b.n	8007078 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f900 	bl	8007266 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007066:	4b07      	ldr	r3, [pc, #28]	@ (8007084 <USBD_SetConfig+0x150>)
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7fe ff64 	bl	8005f3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007072:	2303      	movs	r3, #3
 8007074:	73fb      	strb	r3, [r7, #15]
      break;
 8007076:	bf00      	nop
  }

  return ret;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	2001787c 	.word	0x2001787c

08007088 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	88db      	ldrh	r3, [r3, #6]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d004      	beq.n	80070a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f8e2 	bl	8007266 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80070a2:	e023      	b.n	80070ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	dc02      	bgt.n	80070b6 <USBD_GetConfig+0x2e>
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	dc03      	bgt.n	80070bc <USBD_GetConfig+0x34>
 80070b4:	e015      	b.n	80070e2 <USBD_GetConfig+0x5a>
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d00b      	beq.n	80070d2 <USBD_GetConfig+0x4a>
 80070ba:	e012      	b.n	80070e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	3308      	adds	r3, #8
 80070c6:	2201      	movs	r2, #1
 80070c8:	4619      	mov	r1, r3
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f948 	bl	8007360 <USBD_CtlSendData>
        break;
 80070d0:	e00c      	b.n	80070ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	3304      	adds	r3, #4
 80070d6:	2201      	movs	r2, #1
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f940 	bl	8007360 <USBD_CtlSendData>
        break;
 80070e0:	e004      	b.n	80070ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f8be 	bl	8007266 <USBD_CtlError>
        break;
 80070ea:	bf00      	nop
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007104:	b2db      	uxtb	r3, r3
 8007106:	3b01      	subs	r3, #1
 8007108:	2b02      	cmp	r3, #2
 800710a:	d81e      	bhi.n	800714a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	88db      	ldrh	r3, [r3, #6]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d004      	beq.n	800711e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f8a5 	bl	8007266 <USBD_CtlError>
        break;
 800711c:	e01a      	b.n	8007154 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f043 0202 	orr.w	r2, r3, #2
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	330c      	adds	r3, #12
 800713e:	2202      	movs	r2, #2
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f90c 	bl	8007360 <USBD_CtlSendData>
      break;
 8007148:	e004      	b.n	8007154 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f88a 	bl	8007266 <USBD_CtlError>
      break;
 8007152:	bf00      	nop
  }
}
 8007154:	bf00      	nop
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	885b      	ldrh	r3, [r3, #2]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d107      	bne.n	800717e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f94c 	bl	8007414 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800717c:	e013      	b.n	80071a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	885b      	ldrh	r3, [r3, #2]
 8007182:	2b02      	cmp	r3, #2
 8007184:	d10b      	bne.n	800719e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	889b      	ldrh	r3, [r3, #4]
 800718a:	0a1b      	lsrs	r3, r3, #8
 800718c:	b29b      	uxth	r3, r3
 800718e:	b2da      	uxtb	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f93c 	bl	8007414 <USBD_CtlSendStatus>
}
 800719c:	e003      	b.n	80071a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f860 	bl	8007266 <USBD_CtlError>
}
 80071a6:	bf00      	nop
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b082      	sub	sp, #8
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	3b01      	subs	r3, #1
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d80b      	bhi.n	80071de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	885b      	ldrh	r3, [r3, #2]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d10c      	bne.n	80071e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f91c 	bl	8007414 <USBD_CtlSendStatus>
      }
      break;
 80071dc:	e004      	b.n	80071e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f840 	bl	8007266 <USBD_CtlError>
      break;
 80071e6:	e000      	b.n	80071ea <USBD_ClrFeature+0x3c>
      break;
 80071e8:	bf00      	nop
  }
}
 80071ea:	bf00      	nop
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	781a      	ldrb	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3301      	adds	r3, #1
 800720c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	781a      	ldrb	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3301      	adds	r3, #1
 800721a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f7ff fa16 	bl	800664e <SWAPBYTE>
 8007222:	4603      	mov	r3, r0
 8007224:	461a      	mov	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3301      	adds	r3, #1
 800722e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3301      	adds	r3, #1
 8007234:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f7ff fa09 	bl	800664e <SWAPBYTE>
 800723c:	4603      	mov	r3, r0
 800723e:	461a      	mov	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3301      	adds	r3, #1
 8007248:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3301      	adds	r3, #1
 800724e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f7ff f9fc 	bl	800664e <SWAPBYTE>
 8007256:	4603      	mov	r3, r0
 8007258:	461a      	mov	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	80da      	strh	r2, [r3, #6]
}
 800725e:	bf00      	nop
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007270:	2180      	movs	r1, #128	@ 0x80
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fcfa 	bl	8007c6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007278:	2100      	movs	r1, #0
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fcf6 	bl	8007c6c <USBD_LL_StallEP>
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d042      	beq.n	8007324 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80072a2:	6938      	ldr	r0, [r7, #16]
 80072a4:	f000 f842 	bl	800732c <USBD_GetLen>
 80072a8:	4603      	mov	r3, r0
 80072aa:	3301      	adds	r3, #1
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072b2:	d808      	bhi.n	80072c6 <USBD_GetString+0x3e>
 80072b4:	6938      	ldr	r0, [r7, #16]
 80072b6:	f000 f839 	bl	800732c <USBD_GetLen>
 80072ba:	4603      	mov	r3, r0
 80072bc:	3301      	adds	r3, #1
 80072be:	b29b      	uxth	r3, r3
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	e001      	b.n	80072ca <USBD_GetString+0x42>
 80072c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	4413      	add	r3, r2
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	7812      	ldrb	r2, [r2, #0]
 80072d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	3301      	adds	r3, #1
 80072de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	4413      	add	r3, r2
 80072e6:	2203      	movs	r2, #3
 80072e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
 80072ec:	3301      	adds	r3, #1
 80072ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80072f0:	e013      	b.n	800731a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80072f2:	7dfb      	ldrb	r3, [r7, #23]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	4413      	add	r3, r2
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	7812      	ldrb	r2, [r2, #0]
 80072fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	3301      	adds	r3, #1
 8007302:	613b      	str	r3, [r7, #16]
    idx++;
 8007304:	7dfb      	ldrb	r3, [r7, #23]
 8007306:	3301      	adds	r3, #1
 8007308:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	4413      	add	r3, r2
 8007310:	2200      	movs	r2, #0
 8007312:	701a      	strb	r2, [r3, #0]
    idx++;
 8007314:	7dfb      	ldrb	r3, [r7, #23]
 8007316:	3301      	adds	r3, #1
 8007318:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1e7      	bne.n	80072f2 <USBD_GetString+0x6a>
 8007322:	e000      	b.n	8007326 <USBD_GetString+0x9e>
    return;
 8007324:	bf00      	nop
  }
}
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800733c:	e005      	b.n	800734a <USBD_GetLen+0x1e>
  {
    len++;
 800733e:	7bfb      	ldrb	r3, [r7, #15]
 8007340:	3301      	adds	r3, #1
 8007342:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	3301      	adds	r3, #1
 8007348:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1f5      	bne.n	800733e <USBD_GetLen+0x12>
  }

  return len;
 8007352:	7bfb      	ldrb	r3, [r7, #15]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2202      	movs	r2, #2
 8007370:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	2100      	movs	r1, #0
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 fcf9 	bl	8007d7e <USBD_LL_Transmit>

  return USBD_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	2100      	movs	r1, #0
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 fce8 	bl	8007d7e <USBD_LL_Transmit>

  return USBD_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2203      	movs	r2, #3
 80073c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	2100      	movs	r1, #0
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 fcec 	bl	8007dc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	2100      	movs	r1, #0
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 fcdb 	bl	8007dc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2204      	movs	r2, #4
 8007420:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007424:	2300      	movs	r3, #0
 8007426:	2200      	movs	r2, #0
 8007428:	2100      	movs	r1, #0
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fca7 	bl	8007d7e <USBD_LL_Transmit>

  return USBD_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2205      	movs	r2, #5
 8007446:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800744a:	2300      	movs	r3, #0
 800744c:	2200      	movs	r2, #0
 800744e:	2100      	movs	r1, #0
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fcb5 	bl	8007dc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007464:	2200      	movs	r2, #0
 8007466:	4912      	ldr	r1, [pc, #72]	@ (80074b0 <MX_USB_DEVICE_Init+0x50>)
 8007468:	4812      	ldr	r0, [pc, #72]	@ (80074b4 <MX_USB_DEVICE_Init+0x54>)
 800746a:	f7fe fccd 	bl	8005e08 <USBD_Init>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007474:	f7f9 fa00 	bl	8000878 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007478:	490f      	ldr	r1, [pc, #60]	@ (80074b8 <MX_USB_DEVICE_Init+0x58>)
 800747a:	480e      	ldr	r0, [pc, #56]	@ (80074b4 <MX_USB_DEVICE_Init+0x54>)
 800747c:	f7fe fcf4 	bl	8005e68 <USBD_RegisterClass>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007486:	f7f9 f9f7 	bl	8000878 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800748a:	490c      	ldr	r1, [pc, #48]	@ (80074bc <MX_USB_DEVICE_Init+0x5c>)
 800748c:	4809      	ldr	r0, [pc, #36]	@ (80074b4 <MX_USB_DEVICE_Init+0x54>)
 800748e:	f7fe fc2b 	bl	8005ce8 <USBD_CDC_RegisterInterface>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007498:	f7f9 f9ee 	bl	8000878 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800749c:	4805      	ldr	r0, [pc, #20]	@ (80074b4 <MX_USB_DEVICE_Init+0x54>)
 800749e:	f7fe fd19 	bl	8005ed4 <USBD_Start>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80074a8:	f7f9 f9e6 	bl	8000878 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074ac:	bf00      	nop
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	200177b0 	.word	0x200177b0
 80074b4:	20017880 	.word	0x20017880
 80074b8:	2001771c 	.word	0x2001771c
 80074bc:	2001779c 	.word	0x2001779c

080074c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80074c4:	2200      	movs	r2, #0
 80074c6:	4905      	ldr	r1, [pc, #20]	@ (80074dc <CDC_Init_FS+0x1c>)
 80074c8:	4805      	ldr	r0, [pc, #20]	@ (80074e0 <CDC_Init_FS+0x20>)
 80074ca:	f7fe fc27 	bl	8005d1c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074ce:	4905      	ldr	r1, [pc, #20]	@ (80074e4 <CDC_Init_FS+0x24>)
 80074d0:	4803      	ldr	r0, [pc, #12]	@ (80074e0 <CDC_Init_FS+0x20>)
 80074d2:	f7fe fc45 	bl	8005d60 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80074d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80074d8:	4618      	mov	r0, r3
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	2001835c 	.word	0x2001835c
 80074e0:	20017880 	.word	0x20017880
 80074e4:	20017b5c 	.word	0x20017b5c

080074e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80074e8:	b480      	push	{r7}
 80074ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80074ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	4603      	mov	r3, r0
 8007500:	6039      	str	r1, [r7, #0]
 8007502:	71fb      	strb	r3, [r7, #7]
 8007504:	4613      	mov	r3, r2
 8007506:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	2b23      	cmp	r3, #35	@ 0x23
 800750c:	d84a      	bhi.n	80075a4 <CDC_Control_FS+0xac>
 800750e:	a201      	add	r2, pc, #4	@ (adr r2, 8007514 <CDC_Control_FS+0x1c>)
 8007510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007514:	080075a5 	.word	0x080075a5
 8007518:	080075a5 	.word	0x080075a5
 800751c:	080075a5 	.word	0x080075a5
 8007520:	080075a5 	.word	0x080075a5
 8007524:	080075a5 	.word	0x080075a5
 8007528:	080075a5 	.word	0x080075a5
 800752c:	080075a5 	.word	0x080075a5
 8007530:	080075a5 	.word	0x080075a5
 8007534:	080075a5 	.word	0x080075a5
 8007538:	080075a5 	.word	0x080075a5
 800753c:	080075a5 	.word	0x080075a5
 8007540:	080075a5 	.word	0x080075a5
 8007544:	080075a5 	.word	0x080075a5
 8007548:	080075a5 	.word	0x080075a5
 800754c:	080075a5 	.word	0x080075a5
 8007550:	080075a5 	.word	0x080075a5
 8007554:	080075a5 	.word	0x080075a5
 8007558:	080075a5 	.word	0x080075a5
 800755c:	080075a5 	.word	0x080075a5
 8007560:	080075a5 	.word	0x080075a5
 8007564:	080075a5 	.word	0x080075a5
 8007568:	080075a5 	.word	0x080075a5
 800756c:	080075a5 	.word	0x080075a5
 8007570:	080075a5 	.word	0x080075a5
 8007574:	080075a5 	.word	0x080075a5
 8007578:	080075a5 	.word	0x080075a5
 800757c:	080075a5 	.word	0x080075a5
 8007580:	080075a5 	.word	0x080075a5
 8007584:	080075a5 	.word	0x080075a5
 8007588:	080075a5 	.word	0x080075a5
 800758c:	080075a5 	.word	0x080075a5
 8007590:	080075a5 	.word	0x080075a5
 8007594:	080075a5 	.word	0x080075a5
 8007598:	080075a5 	.word	0x080075a5
 800759c:	080075a5 	.word	0x080075a5
 80075a0:	080075a5 	.word	0x080075a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075a4:	bf00      	nop
  }

  return (USBD_OK);
 80075a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	4805      	ldr	r0, [pc, #20]	@ (80075d8 <CDC_Receive_FS+0x24>)
 80075c2:	f7fe fbcd 	bl	8005d60 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075c6:	4804      	ldr	r0, [pc, #16]	@ (80075d8 <CDC_Receive_FS+0x24>)
 80075c8:	f7fe fbe8 	bl	8005d9c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80075cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20017880 	.word	0x20017880

080075dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	4613      	mov	r3, r2
 80075e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80075ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	371c      	adds	r7, #28
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
	...

08007600 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	4603      	mov	r3, r0
 8007608:	6039      	str	r1, [r7, #0]
 800760a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2212      	movs	r2, #18
 8007610:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007612:	4b03      	ldr	r3, [pc, #12]	@ (8007620 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007614:	4618      	mov	r0, r3
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	200177d0 	.word	0x200177d0

08007624 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	6039      	str	r1, [r7, #0]
 800762e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2204      	movs	r2, #4
 8007634:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007636:	4b03      	ldr	r3, [pc, #12]	@ (8007644 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	200177f0 	.word	0x200177f0

08007648 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	6039      	str	r1, [r7, #0]
 8007652:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007654:	79fb      	ldrb	r3, [r7, #7]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d105      	bne.n	8007666 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	4907      	ldr	r1, [pc, #28]	@ (800767c <USBD_FS_ProductStrDescriptor+0x34>)
 800765e:	4808      	ldr	r0, [pc, #32]	@ (8007680 <USBD_FS_ProductStrDescriptor+0x38>)
 8007660:	f7ff fe12 	bl	8007288 <USBD_GetString>
 8007664:	e004      	b.n	8007670 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	4904      	ldr	r1, [pc, #16]	@ (800767c <USBD_FS_ProductStrDescriptor+0x34>)
 800766a:	4805      	ldr	r0, [pc, #20]	@ (8007680 <USBD_FS_ProductStrDescriptor+0x38>)
 800766c:	f7ff fe0c 	bl	8007288 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007670:	4b02      	ldr	r3, [pc, #8]	@ (800767c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007672:	4618      	mov	r0, r3
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	20018b5c 	.word	0x20018b5c
 8007680:	08007fbc 	.word	0x08007fbc

08007684 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	4603      	mov	r3, r0
 800768c:	6039      	str	r1, [r7, #0]
 800768e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	4904      	ldr	r1, [pc, #16]	@ (80076a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007694:	4804      	ldr	r0, [pc, #16]	@ (80076a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007696:	f7ff fdf7 	bl	8007288 <USBD_GetString>
  return USBD_StrDesc;
 800769a:	4b02      	ldr	r3, [pc, #8]	@ (80076a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800769c:	4618      	mov	r0, r3
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20018b5c 	.word	0x20018b5c
 80076a8:	08007fd4 	.word	0x08007fd4

080076ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	4603      	mov	r3, r0
 80076b4:	6039      	str	r1, [r7, #0]
 80076b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	221a      	movs	r2, #26
 80076bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80076be:	f000 f855 	bl	800776c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80076c2:	4b02      	ldr	r3, [pc, #8]	@ (80076cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	200177f4 	.word	0x200177f4

080076d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	4603      	mov	r3, r0
 80076d8:	6039      	str	r1, [r7, #0]
 80076da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80076dc:	79fb      	ldrb	r3, [r7, #7]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d105      	bne.n	80076ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	4907      	ldr	r1, [pc, #28]	@ (8007704 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076e6:	4808      	ldr	r0, [pc, #32]	@ (8007708 <USBD_FS_ConfigStrDescriptor+0x38>)
 80076e8:	f7ff fdce 	bl	8007288 <USBD_GetString>
 80076ec:	e004      	b.n	80076f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	4904      	ldr	r1, [pc, #16]	@ (8007704 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076f2:	4805      	ldr	r0, [pc, #20]	@ (8007708 <USBD_FS_ConfigStrDescriptor+0x38>)
 80076f4:	f7ff fdc8 	bl	8007288 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076f8:	4b02      	ldr	r3, [pc, #8]	@ (8007704 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	20018b5c 	.word	0x20018b5c
 8007708:	08007fe8 	.word	0x08007fe8

0800770c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	6039      	str	r1, [r7, #0]
 8007716:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007718:	79fb      	ldrb	r3, [r7, #7]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d105      	bne.n	800772a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	4907      	ldr	r1, [pc, #28]	@ (8007740 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007722:	4808      	ldr	r0, [pc, #32]	@ (8007744 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007724:	f7ff fdb0 	bl	8007288 <USBD_GetString>
 8007728:	e004      	b.n	8007734 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	4904      	ldr	r1, [pc, #16]	@ (8007740 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800772e:	4805      	ldr	r0, [pc, #20]	@ (8007744 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007730:	f7ff fdaa 	bl	8007288 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007734:	4b02      	ldr	r3, [pc, #8]	@ (8007740 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20018b5c 	.word	0x20018b5c
 8007744:	08007ff4 	.word	0x08007ff4

08007748 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	4603      	mov	r3, r0
 8007750:	6039      	str	r1, [r7, #0]
 8007752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	220c      	movs	r2, #12
 8007758:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800775a:	4b03      	ldr	r3, [pc, #12]	@ (8007768 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800775c:	4618      	mov	r0, r3
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	200177e4 	.word	0x200177e4

0800776c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007772:	4b0f      	ldr	r3, [pc, #60]	@ (80077b0 <Get_SerialNum+0x44>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007778:	4b0e      	ldr	r3, [pc, #56]	@ (80077b4 <Get_SerialNum+0x48>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800777e:	4b0e      	ldr	r3, [pc, #56]	@ (80077b8 <Get_SerialNum+0x4c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4413      	add	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d009      	beq.n	80077a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007792:	2208      	movs	r2, #8
 8007794:	4909      	ldr	r1, [pc, #36]	@ (80077bc <Get_SerialNum+0x50>)
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 f814 	bl	80077c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800779c:	2204      	movs	r2, #4
 800779e:	4908      	ldr	r1, [pc, #32]	@ (80077c0 <Get_SerialNum+0x54>)
 80077a0:	68b8      	ldr	r0, [r7, #8]
 80077a2:	f000 f80f 	bl	80077c4 <IntToUnicode>
  }
}
 80077a6:	bf00      	nop
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	1fff7a10 	.word	0x1fff7a10
 80077b4:	1fff7a14 	.word	0x1fff7a14
 80077b8:	1fff7a18 	.word	0x1fff7a18
 80077bc:	200177f6 	.word	0x200177f6
 80077c0:	20017806 	.word	0x20017806

080077c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	4613      	mov	r3, r2
 80077d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80077d6:	2300      	movs	r3, #0
 80077d8:	75fb      	strb	r3, [r7, #23]
 80077da:	e027      	b.n	800782c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	0f1b      	lsrs	r3, r3, #28
 80077e0:	2b09      	cmp	r3, #9
 80077e2:	d80b      	bhi.n	80077fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	0f1b      	lsrs	r3, r3, #28
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	4619      	mov	r1, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	440b      	add	r3, r1
 80077f4:	3230      	adds	r2, #48	@ 0x30
 80077f6:	b2d2      	uxtb	r2, r2
 80077f8:	701a      	strb	r2, [r3, #0]
 80077fa:	e00a      	b.n	8007812 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	0f1b      	lsrs	r3, r3, #28
 8007800:	b2da      	uxtb	r2, r3
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	4619      	mov	r1, r3
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	440b      	add	r3, r1
 800780c:	3237      	adds	r2, #55	@ 0x37
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	011b      	lsls	r3, r3, #4
 8007816:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	005b      	lsls	r3, r3, #1
 800781c:	3301      	adds	r3, #1
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	4413      	add	r3, r2
 8007822:	2200      	movs	r2, #0
 8007824:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007826:	7dfb      	ldrb	r3, [r7, #23]
 8007828:	3301      	adds	r3, #1
 800782a:	75fb      	strb	r3, [r7, #23]
 800782c:	7dfa      	ldrb	r2, [r7, #23]
 800782e:	79fb      	ldrb	r3, [r7, #7]
 8007830:	429a      	cmp	r2, r3
 8007832:	d3d3      	bcc.n	80077dc <IntToUnicode+0x18>
  }
}
 8007834:	bf00      	nop
 8007836:	bf00      	nop
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
	...

08007844 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b0a0      	sub	sp, #128	@ 0x80
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800784c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007850:	2200      	movs	r2, #0
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	605a      	str	r2, [r3, #4]
 8007856:	609a      	str	r2, [r3, #8]
 8007858:	60da      	str	r2, [r3, #12]
 800785a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800785c:	f107 0310 	add.w	r3, r7, #16
 8007860:	225c      	movs	r2, #92	@ 0x5c
 8007862:	2100      	movs	r1, #0
 8007864:	4618      	mov	r0, r3
 8007866:	f000 fb71 	bl	8007f4c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007872:	d154      	bne.n	800791e <HAL_PCD_MspInit+0xda>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007874:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007878:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 800787a:	2304      	movs	r3, #4
 800787c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 800787e:	2360      	movs	r3, #96	@ 0x60
 8007880:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8007882:	2302      	movs	r3, #2
 8007884:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8007886:	2304      	movs	r3, #4
 8007888:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800788a:	2301      	movs	r3, #1
 800788c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800788e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007892:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007894:	f107 0310 	add.w	r3, r7, #16
 8007898:	4618      	mov	r0, r3
 800789a:	f7fb f853 	bl	8002944 <HAL_RCCEx_PeriphCLKConfig>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 80078a4:	f7f8 ffe8 	bl	8000878 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078a8:	2300      	movs	r3, #0
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	4b1e      	ldr	r3, [pc, #120]	@ (8007928 <HAL_PCD_MspInit+0xe4>)
 80078ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007928 <HAL_PCD_MspInit+0xe4>)
 80078b2:	f043 0301 	orr.w	r3, r3, #1
 80078b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80078b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007928 <HAL_PCD_MspInit+0xe4>)
 80078ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	60fb      	str	r3, [r7, #12]
 80078c2:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80078c4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80078c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ca:	2302      	movs	r3, #2
 80078cc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078d2:	2303      	movs	r3, #3
 80078d4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80078d6:	230a      	movs	r3, #10
 80078d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078da:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80078de:	4619      	mov	r1, r3
 80078e0:	4812      	ldr	r0, [pc, #72]	@ (800792c <HAL_PCD_MspInit+0xe8>)
 80078e2:	f7f9 fa71 	bl	8000dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80078e6:	4b10      	ldr	r3, [pc, #64]	@ (8007928 <HAL_PCD_MspInit+0xe4>)
 80078e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ea:	4a0f      	ldr	r2, [pc, #60]	@ (8007928 <HAL_PCD_MspInit+0xe4>)
 80078ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078f0:	6353      	str	r3, [r2, #52]	@ 0x34
 80078f2:	2300      	movs	r3, #0
 80078f4:	60bb      	str	r3, [r7, #8]
 80078f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007928 <HAL_PCD_MspInit+0xe4>)
 80078f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078fa:	4a0b      	ldr	r2, [pc, #44]	@ (8007928 <HAL_PCD_MspInit+0xe4>)
 80078fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007900:	6453      	str	r3, [r2, #68]	@ 0x44
 8007902:	4b09      	ldr	r3, [pc, #36]	@ (8007928 <HAL_PCD_MspInit+0xe4>)
 8007904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800790a:	60bb      	str	r3, [r7, #8]
 800790c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800790e:	2200      	movs	r2, #0
 8007910:	2100      	movs	r1, #0
 8007912:	2043      	movs	r0, #67	@ 0x43
 8007914:	f7f9 fa21 	bl	8000d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007918:	2043      	movs	r0, #67	@ 0x43
 800791a:	f7f9 fa3a 	bl	8000d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800791e:	bf00      	nop
 8007920:	3780      	adds	r7, #128	@ 0x80
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	40023800 	.word	0x40023800
 800792c:	40020000 	.word	0x40020000

08007930 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007944:	4619      	mov	r1, r3
 8007946:	4610      	mov	r0, r2
 8007948:	f7fe fb11 	bl	8005f6e <USBD_LL_SetupStage>
}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007966:	78fa      	ldrb	r2, [r7, #3]
 8007968:	6879      	ldr	r1, [r7, #4]
 800796a:	4613      	mov	r3, r2
 800796c:	00db      	lsls	r3, r3, #3
 800796e:	4413      	add	r3, r2
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	440b      	add	r3, r1
 8007974:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	78fb      	ldrb	r3, [r7, #3]
 800797c:	4619      	mov	r1, r3
 800797e:	f7fe fb4b 	bl	8006018 <USBD_LL_DataOutStage>
}
 8007982:	bf00      	nop
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b082      	sub	sp, #8
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	460b      	mov	r3, r1
 8007994:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800799c:	78fa      	ldrb	r2, [r7, #3]
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	4613      	mov	r3, r2
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	4413      	add	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	440b      	add	r3, r1
 80079aa:	3320      	adds	r3, #32
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	78fb      	ldrb	r3, [r7, #3]
 80079b0:	4619      	mov	r1, r3
 80079b2:	f7fe fbe4 	bl	800617e <USBD_LL_DataInStage>
}
 80079b6:	bf00      	nop
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b082      	sub	sp, #8
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fe fd1e 	bl	800640e <USBD_LL_SOF>
}
 80079d2:	bf00      	nop
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b084      	sub	sp, #16
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80079e2:	2301      	movs	r3, #1
 80079e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	79db      	ldrb	r3, [r3, #7]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d102      	bne.n	80079f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]
 80079f2:	e008      	b.n	8007a06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	79db      	ldrb	r3, [r3, #7]
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d102      	bne.n	8007a02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80079fc:	2301      	movs	r3, #1
 80079fe:	73fb      	strb	r3, [r7, #15]
 8007a00:	e001      	b.n	8007a06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007a02:	f7f8 ff39 	bl	8000878 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a0c:	7bfa      	ldrb	r2, [r7, #15]
 8007a0e:	4611      	mov	r1, r2
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe fcb8 	bl	8006386 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fe fc60 	bl	80062e2 <USBD_LL_Reset>
}
 8007a22:	bf00      	nop
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
	...

08007a2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fe fcb3 	bl	80063a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6812      	ldr	r2, [r2, #0]
 8007a4e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007a52:	f043 0301 	orr.w	r3, r3, #1
 8007a56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	7adb      	ldrb	r3, [r3, #11]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d005      	beq.n	8007a6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a60:	4b04      	ldr	r3, [pc, #16]	@ (8007a74 <HAL_PCD_SuspendCallback+0x48>)
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	4a03      	ldr	r2, [pc, #12]	@ (8007a74 <HAL_PCD_SuspendCallback+0x48>)
 8007a66:	f043 0306 	orr.w	r3, r3, #6
 8007a6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a6c:	bf00      	nop
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	e000ed00 	.word	0xe000ed00

08007a78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fe fca9 	bl	80063de <USBD_LL_Resume>
}
 8007a8c:	bf00      	nop
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007aa6:	78fa      	ldrb	r2, [r7, #3]
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fe fd01 	bl	80064b2 <USBD_LL_IsoOUTIncomplete>
}
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007aca:	78fa      	ldrb	r2, [r7, #3]
 8007acc:	4611      	mov	r1, r2
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe fcbd 	bl	800644e <USBD_LL_IsoINIncomplete>
}
 8007ad4:	bf00      	nop
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe fd13 	bl	8006516 <USBD_LL_DevConnected>
}
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fe fd10 	bl	800652c <USBD_LL_DevDisconnected>
}
 8007b0c:	bf00      	nop
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d13c      	bne.n	8007b9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b24:	4a20      	ldr	r2, [pc, #128]	@ (8007ba8 <USBD_LL_Init+0x94>)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ba8 <USBD_LL_Init+0x94>)
 8007b30:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b34:	4b1c      	ldr	r3, [pc, #112]	@ (8007ba8 <USBD_LL_Init+0x94>)
 8007b36:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007b3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ba8 <USBD_LL_Init+0x94>)
 8007b3e:	2206      	movs	r2, #6
 8007b40:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b42:	4b19      	ldr	r3, [pc, #100]	@ (8007ba8 <USBD_LL_Init+0x94>)
 8007b44:	2202      	movs	r2, #2
 8007b46:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b48:	4b17      	ldr	r3, [pc, #92]	@ (8007ba8 <USBD_LL_Init+0x94>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007b4e:	4b16      	ldr	r3, [pc, #88]	@ (8007ba8 <USBD_LL_Init+0x94>)
 8007b50:	2202      	movs	r2, #2
 8007b52:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b54:	4b14      	ldr	r3, [pc, #80]	@ (8007ba8 <USBD_LL_Init+0x94>)
 8007b56:	2200      	movs	r2, #0
 8007b58:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007b5a:	4b13      	ldr	r3, [pc, #76]	@ (8007ba8 <USBD_LL_Init+0x94>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007b60:	4b11      	ldr	r3, [pc, #68]	@ (8007ba8 <USBD_LL_Init+0x94>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007b66:	4b10      	ldr	r3, [pc, #64]	@ (8007ba8 <USBD_LL_Init+0x94>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8007ba8 <USBD_LL_Init+0x94>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007b72:	480d      	ldr	r0, [pc, #52]	@ (8007ba8 <USBD_LL_Init+0x94>)
 8007b74:	f7f9 fb06 	bl	8001184 <HAL_PCD_Init>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007b7e:	f7f8 fe7b 	bl	8000878 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007b82:	2180      	movs	r1, #128	@ 0x80
 8007b84:	4808      	ldr	r0, [pc, #32]	@ (8007ba8 <USBD_LL_Init+0x94>)
 8007b86:	f7fa fd66 	bl	8002656 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007b8a:	2240      	movs	r2, #64	@ 0x40
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	4806      	ldr	r0, [pc, #24]	@ (8007ba8 <USBD_LL_Init+0x94>)
 8007b90:	f7fa fd1a 	bl	80025c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007b94:	2280      	movs	r2, #128	@ 0x80
 8007b96:	2101      	movs	r1, #1
 8007b98:	4803      	ldr	r0, [pc, #12]	@ (8007ba8 <USBD_LL_Init+0x94>)
 8007b9a:	f7fa fd15 	bl	80025c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	20018d5c 	.word	0x20018d5c

08007bac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7f9 fbf4 	bl	80013b0 <HAL_PCD_Start>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 f990 	bl	8007ef4 <USBD_Get_USB_Status>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	4608      	mov	r0, r1
 8007bec:	4611      	mov	r1, r2
 8007bee:	461a      	mov	r2, r3
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	70fb      	strb	r3, [r7, #3]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	70bb      	strb	r3, [r7, #2]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007c0a:	78bb      	ldrb	r3, [r7, #2]
 8007c0c:	883a      	ldrh	r2, [r7, #0]
 8007c0e:	78f9      	ldrb	r1, [r7, #3]
 8007c10:	f7fa f8f5 	bl	8001dfe <HAL_PCD_EP_Open>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 f96a 	bl	8007ef4 <USBD_Get_USB_Status>
 8007c20:	4603      	mov	r3, r0
 8007c22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	460b      	mov	r3, r1
 8007c38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c48:	78fa      	ldrb	r2, [r7, #3]
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fa f940 	bl	8001ed2 <HAL_PCD_EP_Close>
 8007c52:	4603      	mov	r3, r0
 8007c54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 f94b 	bl	8007ef4 <USBD_Get_USB_Status>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c62:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c86:	78fa      	ldrb	r2, [r7, #3]
 8007c88:	4611      	mov	r1, r2
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fa f9f8 	bl	8002080 <HAL_PCD_EP_SetStall>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 f92c 	bl	8007ef4 <USBD_Get_USB_Status>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007cc4:	78fa      	ldrb	r2, [r7, #3]
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fa fa3c 	bl	8002146 <HAL_PCD_EP_ClrStall>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 f90d 	bl	8007ef4 <USBD_Get_USB_Status>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007cfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	da0b      	bge.n	8007d1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d04:	78fb      	ldrb	r3, [r7, #3]
 8007d06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d0a:	68f9      	ldr	r1, [r7, #12]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	00db      	lsls	r3, r3, #3
 8007d10:	4413      	add	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	440b      	add	r3, r1
 8007d16:	3316      	adds	r3, #22
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	e00b      	b.n	8007d34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d1c:	78fb      	ldrb	r3, [r7, #3]
 8007d1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d22:	68f9      	ldr	r1, [r7, #12]
 8007d24:	4613      	mov	r3, r2
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	440b      	add	r3, r1
 8007d2e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007d32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d5a:	78fa      	ldrb	r2, [r7, #3]
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fa f829 	bl	8001db6 <HAL_PCD_SetAddress>
 8007d64:	4603      	mov	r3, r0
 8007d66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 f8c2 	bl	8007ef4 <USBD_Get_USB_Status>
 8007d70:	4603      	mov	r3, r0
 8007d72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b086      	sub	sp, #24
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	607a      	str	r2, [r7, #4]
 8007d88:	603b      	str	r3, [r7, #0]
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007d9c:	7af9      	ldrb	r1, [r7, #11]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	f7fa f933 	bl	800200c <HAL_PCD_EP_Transmit>
 8007da6:	4603      	mov	r3, r0
 8007da8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 f8a1 	bl	8007ef4 <USBD_Get_USB_Status>
 8007db2:	4603      	mov	r3, r0
 8007db4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007db6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	607a      	str	r2, [r7, #4]
 8007dca:	603b      	str	r3, [r7, #0]
 8007dcc:	460b      	mov	r3, r1
 8007dce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007dde:	7af9      	ldrb	r1, [r7, #11]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	f7fa f8bf 	bl	8001f66 <HAL_PCD_EP_Receive>
 8007de8:	4603      	mov	r3, r0
 8007dea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dec:	7dfb      	ldrb	r3, [r7, #23]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 f880 	bl	8007ef4 <USBD_Get_USB_Status>
 8007df4:	4603      	mov	r3, r0
 8007df6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007df8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b082      	sub	sp, #8
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e14:	78fa      	ldrb	r2, [r7, #3]
 8007e16:	4611      	mov	r1, r2
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fa f8df 	bl	8001fdc <HAL_PCD_EP_GetRxCount>
 8007e1e:	4603      	mov	r3, r0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	460b      	mov	r3, r1
 8007e32:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007e34:	78fb      	ldrb	r3, [r7, #3]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <HAL_PCDEx_LPM_Callback+0x18>
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d01f      	beq.n	8007e7e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007e3e:	e03b      	b.n	8007eb8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	7adb      	ldrb	r3, [r3, #11]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d007      	beq.n	8007e58 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8007e48:	f7f8 fc1a 	bl	8000680 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8007ec0 <HAL_PCDEx_LPM_Callback+0x98>)
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	4a1b      	ldr	r2, [pc, #108]	@ (8007ec0 <HAL_PCDEx_LPM_Callback+0x98>)
 8007e52:	f023 0306 	bic.w	r3, r3, #6
 8007e56:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	6812      	ldr	r2, [r2, #0]
 8007e66:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e6a:	f023 0301 	bic.w	r3, r3, #1
 8007e6e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe fab1 	bl	80063de <USBD_LL_Resume>
    break;
 8007e7c:	e01c      	b.n	8007eb8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	6812      	ldr	r2, [r2, #0]
 8007e8c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e90:	f043 0301 	orr.w	r3, r3, #1
 8007e94:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fe fa82 	bl	80063a6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	7adb      	ldrb	r3, [r3, #11]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d005      	beq.n	8007eb6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007eaa:	4b05      	ldr	r3, [pc, #20]	@ (8007ec0 <HAL_PCDEx_LPM_Callback+0x98>)
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	4a04      	ldr	r2, [pc, #16]	@ (8007ec0 <HAL_PCDEx_LPM_Callback+0x98>)
 8007eb0:	f043 0306 	orr.w	r3, r3, #6
 8007eb4:	6113      	str	r3, [r2, #16]
    break;
 8007eb6:	bf00      	nop
}
 8007eb8:	bf00      	nop
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	e000ed00 	.word	0xe000ed00

08007ec4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007ecc:	4b03      	ldr	r3, [pc, #12]	@ (8007edc <USBD_static_malloc+0x18>)
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	20019240 	.word	0x20019240

08007ee0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]

}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f02:	79fb      	ldrb	r3, [r7, #7]
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d817      	bhi.n	8007f38 <USBD_Get_USB_Status+0x44>
 8007f08:	a201      	add	r2, pc, #4	@ (adr r2, 8007f10 <USBD_Get_USB_Status+0x1c>)
 8007f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0e:	bf00      	nop
 8007f10:	08007f21 	.word	0x08007f21
 8007f14:	08007f27 	.word	0x08007f27
 8007f18:	08007f2d 	.word	0x08007f2d
 8007f1c:	08007f33 	.word	0x08007f33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	73fb      	strb	r3, [r7, #15]
    break;
 8007f24:	e00b      	b.n	8007f3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f26:	2303      	movs	r3, #3
 8007f28:	73fb      	strb	r3, [r7, #15]
    break;
 8007f2a:	e008      	b.n	8007f3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f30:	e005      	b.n	8007f3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f32:	2303      	movs	r3, #3
 8007f34:	73fb      	strb	r3, [r7, #15]
    break;
 8007f36:	e002      	b.n	8007f3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f3c:	bf00      	nop
  }
  return usb_status;
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <memset>:
 8007f4c:	4402      	add	r2, r0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d100      	bne.n	8007f56 <memset+0xa>
 8007f54:	4770      	bx	lr
 8007f56:	f803 1b01 	strb.w	r1, [r3], #1
 8007f5a:	e7f9      	b.n	8007f50 <memset+0x4>

08007f5c <__libc_init_array>:
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	4d0d      	ldr	r5, [pc, #52]	@ (8007f94 <__libc_init_array+0x38>)
 8007f60:	4c0d      	ldr	r4, [pc, #52]	@ (8007f98 <__libc_init_array+0x3c>)
 8007f62:	1b64      	subs	r4, r4, r5
 8007f64:	10a4      	asrs	r4, r4, #2
 8007f66:	2600      	movs	r6, #0
 8007f68:	42a6      	cmp	r6, r4
 8007f6a:	d109      	bne.n	8007f80 <__libc_init_array+0x24>
 8007f6c:	4d0b      	ldr	r5, [pc, #44]	@ (8007f9c <__libc_init_array+0x40>)
 8007f6e:	4c0c      	ldr	r4, [pc, #48]	@ (8007fa0 <__libc_init_array+0x44>)
 8007f70:	f000 f818 	bl	8007fa4 <_init>
 8007f74:	1b64      	subs	r4, r4, r5
 8007f76:	10a4      	asrs	r4, r4, #2
 8007f78:	2600      	movs	r6, #0
 8007f7a:	42a6      	cmp	r6, r4
 8007f7c:	d105      	bne.n	8007f8a <__libc_init_array+0x2e>
 8007f7e:	bd70      	pop	{r4, r5, r6, pc}
 8007f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f84:	4798      	blx	r3
 8007f86:	3601      	adds	r6, #1
 8007f88:	e7ee      	b.n	8007f68 <__libc_init_array+0xc>
 8007f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f8e:	4798      	blx	r3
 8007f90:	3601      	adds	r6, #1
 8007f92:	e7f2      	b.n	8007f7a <__libc_init_array+0x1e>
 8007f94:	0800801c 	.word	0x0800801c
 8007f98:	0800801c 	.word	0x0800801c
 8007f9c:	0800801c 	.word	0x0800801c
 8007fa0:	08008020 	.word	0x08008020

08007fa4 <_init>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	bf00      	nop
 8007fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007faa:	bc08      	pop	{r3}
 8007fac:	469e      	mov	lr, r3
 8007fae:	4770      	bx	lr

08007fb0 <_fini>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr
